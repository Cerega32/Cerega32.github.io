'use-strict';

{
  const urlPost = 'https://js.dump.academy/keksobooking';
  const urlGet = 'https://js.dump.academy/keksobooking/data';

  const request = (onLoad, onError) => {
    const xhr = new XMLHttpRequest();
    xhr.responseType = 'json';

    xhr.addEventListener('load', () => {
      if (xhr.status === 200) {
        onLoad(xhr.response);
      } else {
        onError(`Статус ответа: ${xhr.status} ${xhr.statusText}`);
      }
    });
    
    xhr.addEventListener('error', () => {
      onError('Произошла ошибка соединения');
    });
    xhr.addEventListener('timeout', () => {
      onError(`Запрос не успел выполниться за ${xhr.timeout}мс`);
    });

    return xhr;
  }



  const save = (data, onLoad, onError) => {
    const xhr = request(onLoad, onError);

    xhr.open('POST', urlPost);
    xhr.send(data);
    
  }



  const load = (onLoad, onError) => {
    const xhr = request(onLoad, onError);
    
    xhr.open('GET', urlGet);
    xhr.send();

  }

  window.backend = {
    save,
    load
  }
}
'use strict';

{
  const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]);



  const cardTemplate = document.querySelector('template')
    .content
    .querySelector('.map__card');

  const filtersContainer = document.querySelector('.map__filters-container');


  const renderCard = () => {
    let cardElement = window.map.map.querySelector('.map__card');

    if (!cardElement) {
      cardElement = cardTemplate.cloneNode(true);
      window.map.map.insertBefore(cardElement, filtersContainer);
      hideElement(cardElement);

      const popupClose = cardElement.querySelector('.popup__close');
      popupClose.addEventListener('click', function () {
        hideElement(cardElement);
        const pinActive = window.map.map.querySelector('.map__pin--active');
        pinActive.classList.remove('map__pin--active');
        document.removeEventListener('keydown', onPopupEscPress);
      });
    }
  };


  const fillCard = (element, i) => {

    const pinData = window.data.data[i];
    element.querySelector('.popup__title').textContent = pinData.offer.title;
    element.querySelector('.popup__text--address').textContent = pinData.offer.address;
    element.querySelector('.popup__text--price').textContent = pinData.offer.price + '₽/ночь';
    element.querySelector('.popup__type').textContent = typeOutput.get(pinData.offer.type);
    element.querySelector('.popup__text--capacity').textContent = `${pinData.offer.rooms} комнаты для ${pinData.offer.guests} гостей`;
    element.querySelector('.popup__text--time').textContent = `Заезд после ${pinData.offer.checkin}, выезд до ${pinData.offer.checkout}`;
    
    const popupFeatures = element.querySelector('.popup__features');
    popupFeatures.innerHTML = pinData.offer.features.reduce((acc, value) => {
      return `<li class="feature feature--${value}"></li> ${acc}`
    }, '');
    
    element.querySelector('.popup__description').textContent = pinData.offer.description;
    
    const popupPhotos = element.querySelector('.popup__photos');
    popupPhotos.innerHTML = pinData.offer.photos.reduce((acc, value) => {
      return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
    }, '');

    element.querySelector('.popup__avatar').src = pinData.author.avatar;

    return element;
  }

  const hideElement = (element) => {
    element.classList.add('hidden');
  };

  const showElement = (element) => {
    element.classList.remove('hidden');
  };


  const openModal = () => {
    const mapPins = window.pin.mapPins.querySelectorAll('.map__pin:not(.map__pin--main)');
    const card = window.map.map.querySelector('.map__card');

    mapPins.forEach((elem, i) => {
      elem.addEventListener('click', function () {
        closeModal();
        elem.classList.add('map__pin--active');
        fillCard(card, i);
        showElement(card);

        document.addEventListener('keydown', onPopupEscPress);
      });
    });

  };


  const closeModal = () => {
    const card = window.map.map.querySelector('.map__card');
    if (card) {
      hideElement(card);
      document.removeEventListener('keydown', onPopupEscPress);

      const activePin = window.pin.mapPins.querySelector('.map__pin--active');
      if (activePin) {
        activePin.classList.remove('map__pin--active');
      }
    }
  };

  const onPopupEscPress = function (evt) {
    if (evt.keyCode === 27) {
      closeModal();
    }
  };



  window.card = {
    renderCard,
    openModal,
    closeModal
  };


}
'use strict';

{

  // const titleOffer = [
  //   'Большая уютная квартира',
  //   "Маленькая неуютная квартира", 
  //   "Огромный прекрасный дворец", 
  //   "Маленький ужасный дворец", 
  //   "Красивый гостевой домик", 
  //   "Некрасивый негостеприимный домик", 
  //   "Уютное бунгало далеко от моря", 
  //   "Неуютное бунгало по колено в воде"
  // ]

  // const typeOffer = [
  //   'palace', 'flat', 'house', 'bungalo'
  // ]

  // const checkinOffer = [
  //   '12:00', '13:00', '14:00'
  // ]

  // const featuresOffer = [
  //   "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
  // ]

  // const photosOffer = [
  //   "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  //   "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  //   "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
  // ]


  const pinSize = {
    width: 50,
    height: 70
  };


  // const randomizer = (min, max = false, arr) => {
  //   if (!Array.isArray(min)) {
  //     return Math.floor(min + Math.random() * (max + 1 - min));
  //   }
  //   const rand = Math.floor(Math.random() * (min.length));
  //   if (arr) {
  //     const copyArr = [...min];
  //     let newArr = [];
  //     for(let i = 0; i < max; i++) {
  //       newArr = [...newArr, randomizer(copyArr, true)];
  //     }
  //     return newArr;
  //   }
  //   if(max === false) {
  //     return min[rand];
  //   }
  //   return min.splice(rand, 1).join();
  // }



  // const makeArray = (maps) => {
  //   return maps.map((value, index) => {
  //     value = {
  //       author: {
  //         avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
  //       },
  //       location: {
  //         x: randomizer(300, 900),
  //         y: randomizer(130, 630)
  //       },
  //       offer: {
  //         title: randomizer(titleOffer, true),
  //         address: '',
  //         price: randomizer(1000, 1000000),
  //         type: randomizer(typeOffer),
  //         rooms: randomizer(1, 5),
  //         guests: randomizer(1, 10),
  //         checkin: randomizer(checkinOffer),
  //         checkout: randomizer(checkinOffer),
  //         features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
  //         description: '',
  //         photos: randomizer(photosOffer, photosOffer.length, true)
  //       }      
  //     }
  //     value.offer.address = `${value.location.x}, ${value.location.y}`
  //     return value;
  //   })
  // }



  // const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
  // const pinsData = makeArray(maps);

  const onLoad = (array) => {
    window.data.data = array;
  };

  const onError = (message) => {
    showMessage(message);
  };

  window.backend.load(onLoad, onError);



  const messageBlock = document.querySelector('.success');
  const textMessage = messageBlock.querySelector('.success__message');

  const onMessageClick = () => {
    messageBlock.classList.add('hidden');
    document.removeEventListener('click', onMessageClick);
    document.removeEventListener('keydown', onMessageEscPress);
  };
  
  const onMessageEscPress = (evt) => {
    if (evt.keyCode === 27) {
      messageBlock.classList.add('hidden');
      document.removeEventListener('click', onMessageClick);
      document.removeEventListener('keydown', onMessageEscPress);
    }
  };
  
  const hideMessageByTime = () => {
    setTimeout(() => {
      messageBlock.classList.add('hidden');
      document.removeEventListener('click', onMessageClick);
      document.removeEventListener('keydown', onMessageEscPress);
    }, 5000);
  };
  
  const showMessage = (message) => {
    messageBlock.classList.remove('hidden');
    textMessage.textContent = message;

    document.addEventListener('click', onMessageClick);
    document.addEventListener('keydown', onMessageEscPress);

    hideMessageByTime();
  };
  
  
  window.data = {
    pinSizeWidth: pinSize.width,
    pinSizeHeight: pinSize.height,
    showMessage,
    onError
  }
}

'use strict';
{

}

const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const fields = window.map.noticeForm.querySelectorAll('fieldset');
const addressInput = window.map.noticeForm.querySelector('input[name="address"]');
const typeSelect = window.map.noticeForm.querySelector('select[name="type"]');
const priceInput = window.map.noticeForm.querySelector('input[name="price"]');
const timeInSelect = window.map.noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = window.map.noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = window.map.noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = window.map.noticeForm.querySelector('select[name="capacity"]');
const submitBtn = window.map.noticeForm.querySelector('.form__submit');
const resetBtn = window.map.noticeForm.querySelector('.form__reset');


const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}

typeSelect.addEventListener('change', changePriceFromType);
changePriceFromType();

timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});

timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


// const showSuccess = () => {
//   success.classList.remove('hidden');
//   document.addEventListener('keydown', (evt) => {
//     if (evt.keyCode === 27) {
//       success.classList.add('hidden');
//     }
//   });
//   document.addEventListener('click', () => {
//     success.classList.add('hidden');
//   });
// };


const blockForm = (status) => {
  status = status || false;
  window.map.noticeForm.classList.toggle('notice__form--disabled', status);

  fields.forEach(function (elem) {
    elem.disabled = status;
  });
};

const removeFieldsInvalidity = () => {
  window.map.noticeForm.querySelectorAll('input, select, textarea').forEach(function (item) {
    item.classList.remove('invalid');
  });
};

const resetCoordOfMainPin = () => {
  window.map.mapPinMain.style.left = window.map.defaultPosition.x + 'px';
  window.map.mapPinMain.style.top = window.map.defaultPosition.y + 'px';
  window.map.addValueToAddressInput();
};

const deactivationForm = () => {
  // const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  window.map.noticeForm.reset();
  window.card.closeModal();
  window.pin.hidePins(true);
  blockForm(true);
  window.map.makeMapOfFaded(true);
  resetCoordOfMainPin();
  window.map.allowToRenderingPins = true;
};

const onSuccess = () => {
  window.data.showMessage('Ваше объявление успешно размещено!');
}


window.map.noticeForm.addEventListener('submit', (evt) => {
  window.backend.save(new FormData(window.map.noticeForm), onSuccess, window.data.onError);
  evt.preventDefault();
  // showSuccess();
  deactivationForm();  
});


resetBtn.addEventListener('click', deactivationForm)

window.form = {
  blockForm: blockForm
};
'use-strict';

{
  const urlPost = 'https://js.dump.academy/keksobooking';
  const urlGet = 'https://js.dump.academy/keksobooking/data';

  const request = (onLoad, onError) => {
    const xhr = new XMLHttpRequest();
    xhr.responseType = 'json';

    xhr.addEventListener('load', () => {
      if (xhr.status === 200) {
        onLoad(xhr.response);
      } else {
        onError(`Статус ответа: ${xhr.status} ${xhr.statusText}`);
      }
    });
    
    xhr.addEventListener('error', () => {
      onError('Произошла ошибка соединения');
    });
    xhr.addEventListener('timeout', () => {
      onError(`Запрос не успел выполниться за ${xhr.timeout}мс`);
    });

    return xhr;
  }



  const save = (data, onLoad, onError) => {
    const xhr = request(onLoad, onError);

    xhr.open('POST', urlPost);
    xhr.send(data);
    
  }



  const load = (onLoad, onError) => {
    const xhr = request(onLoad, onError);
    
    xhr.open('GET', urlGet);
    xhr.send();

  }

  window.backend = {
    save,
    load
  }
}
'use strict';

{
  const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]);



  const cardTemplate = document.querySelector('template')
    .content
    .querySelector('.map__card');

  const filtersContainer = document.querySelector('.map__filters-container');


  const renderCard = () => {
    let cardElement = window.map.map.querySelector('.map__card');

    if (!cardElement) {
      cardElement = cardTemplate.cloneNode(true);
      window.map.map.insertBefore(cardElement, filtersContainer);
      hideElement(cardElement);

      const popupClose = cardElement.querySelector('.popup__close');
      popupClose.addEventListener('click', function () {
        hideElement(cardElement);
        const pinActive = window.map.map.querySelector('.map__pin--active');
        pinActive.classList.remove('map__pin--active');
        document.removeEventListener('keydown', onPopupEscPress);
      });
    }
  };


  const fillCard = (element, i) => {

    const pinData = window.data.data[i];
    element.querySelector('.popup__title').textContent = pinData.offer.title;
    element.querySelector('.popup__text--address').textContent = pinData.offer.address;
    element.querySelector('.popup__text--price').textContent = pinData.offer.price + '₽/ночь';
    element.querySelector('.popup__type').textContent = typeOutput.get(pinData.offer.type);
    element.querySelector('.popup__text--capacity').textContent = `${pinData.offer.rooms} комнаты для ${pinData.offer.guests} гостей`;
    element.querySelector('.popup__text--time').textContent = `Заезд после ${pinData.offer.checkin}, выезд до ${pinData.offer.checkout}`;
    
    const popupFeatures = element.querySelector('.popup__features');
    popupFeatures.innerHTML = pinData.offer.features.reduce((acc, value) => {
      return `<li class="feature feature--${value}"></li> ${acc}`
    }, '');
    
    element.querySelector('.popup__description').textContent = pinData.offer.description;
    
    const popupPhotos = element.querySelector('.popup__photos');
    popupPhotos.innerHTML = pinData.offer.photos.reduce((acc, value) => {
      return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
    }, '');

    element.querySelector('.popup__avatar').src = pinData.author.avatar;

    return element;
  }

  const hideElement = (element) => {
    element.classList.add('hidden');
  };

  const showElement = (element) => {
    element.classList.remove('hidden');
  };


  const openModal = () => {
    const mapPins = window.pin.mapPins.querySelectorAll('.map__pin:not(.map__pin--main)');
    const card = window.map.map.querySelector('.map__card');

    mapPins.forEach((elem, i) => {
      elem.addEventListener('click', function () {
        closeModal();
        elem.classList.add('map__pin--active');
        fillCard(card, i);
        showElement(card);

        document.addEventListener('keydown', onPopupEscPress);
      });
    });

  };


  const closeModal = () => {
    const card = window.map.map.querySelector('.map__card');
    if (card) {
      hideElement(card);
      document.removeEventListener('keydown', onPopupEscPress);

      const activePin = window.pin.mapPins.querySelector('.map__pin--active');
      if (activePin) {
        activePin.classList.remove('map__pin--active');
      }
    }
  };

  const onPopupEscPress = function (evt) {
    if (evt.keyCode === 27) {
      closeModal();
    }
  };



  window.card = {
    renderCard,
    openModal,
    closeModal
  };


}
'use strict';

{

  // const titleOffer = [
  //   'Большая уютная квартира',
  //   "Маленькая неуютная квартира", 
  //   "Огромный прекрасный дворец", 
  //   "Маленький ужасный дворец", 
  //   "Красивый гостевой домик", 
  //   "Некрасивый негостеприимный домик", 
  //   "Уютное бунгало далеко от моря", 
  //   "Неуютное бунгало по колено в воде"
  // ]

  // const typeOffer = [
  //   'palace', 'flat', 'house', 'bungalo'
  // ]

  // const checkinOffer = [
  //   '12:00', '13:00', '14:00'
  // ]

  // const featuresOffer = [
  //   "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
  // ]

  // const photosOffer = [
  //   "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  //   "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  //   "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
  // ]


  const pinSize = {
    width: 50,
    height: 70
  };


  // const randomizer = (min, max = false, arr) => {
  //   if (!Array.isArray(min)) {
  //     return Math.floor(min + Math.random() * (max + 1 - min));
  //   }
  //   const rand = Math.floor(Math.random() * (min.length));
  //   if (arr) {
  //     const copyArr = [...min];
  //     let newArr = [];
  //     for(let i = 0; i < max; i++) {
  //       newArr = [...newArr, randomizer(copyArr, true)];
  //     }
  //     return newArr;
  //   }
  //   if(max === false) {
  //     return min[rand];
  //   }
  //   return min.splice(rand, 1).join();
  // }



  // const makeArray = (maps) => {
  //   return maps.map((value, index) => {
  //     value = {
  //       author: {
  //         avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
  //       },
  //       location: {
  //         x: randomizer(300, 900),
  //         y: randomizer(130, 630)
  //       },
  //       offer: {
  //         title: randomizer(titleOffer, true),
  //         address: '',
  //         price: randomizer(1000, 1000000),
  //         type: randomizer(typeOffer),
  //         rooms: randomizer(1, 5),
  //         guests: randomizer(1, 10),
  //         checkin: randomizer(checkinOffer),
  //         checkout: randomizer(checkinOffer),
  //         features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
  //         description: '',
  //         photos: randomizer(photosOffer, photosOffer.length, true)
  //       }      
  //     }
  //     value.offer.address = `${value.location.x}, ${value.location.y}`
  //     return value;
  //   })
  // }



  // const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
  // const pinsData = makeArray(maps);

  const onLoad = (array) => {
    window.data.data = array;
  };

  const onError = (message) => {
    showMessage(message);
  };

  window.backend.load(onLoad, onError);



  const messageBlock = document.querySelector('.success');
  const textMessage = messageBlock.querySelector('.success__message');

  const onMessageClick = () => {
    messageBlock.classList.add('hidden');
    document.removeEventListener('click', onMessageClick);
    document.removeEventListener('keydown', onMessageEscPress);
  };
  
  const onMessageEscPress = (evt) => {
    if (evt.keyCode === 27) {
      messageBlock.classList.add('hidden');
      document.removeEventListener('click', onMessageClick);
      document.removeEventListener('keydown', onMessageEscPress);
    }
  };
  
  const hideMessageByTime = () => {
    setTimeout(() => {
      messageBlock.classList.add('hidden');
      document.removeEventListener('click', onMessageClick);
      document.removeEventListener('keydown', onMessageEscPress);
    }, 5000);
  };
  
  const showMessage = (message) => {
    messageBlock.classList.remove('hidden');
    textMessage.textContent = message;

    document.addEventListener('click', onMessageClick);
    document.addEventListener('keydown', onMessageEscPress);

    hideMessageByTime();
  };
  
  
  window.data = {
    pinSizeWidth: pinSize.width,
    pinSizeHeight: pinSize.height,
    showMessage,
    onError
  }
}

'use strict';
{

}

const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const fields = window.map.noticeForm.querySelectorAll('fieldset');
const addressInput = window.map.noticeForm.querySelector('input[name="address"]');
const typeSelect = window.map.noticeForm.querySelector('select[name="type"]');
const priceInput = window.map.noticeForm.querySelector('input[name="price"]');
const timeInSelect = window.map.noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = window.map.noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = window.map.noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = window.map.noticeForm.querySelector('select[name="capacity"]');
const submitBtn = window.map.noticeForm.querySelector('.form__submit');
const resetBtn = window.map.noticeForm.querySelector('.form__reset');


const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}

typeSelect.addEventListener('change', changePriceFromType);
changePriceFromType();

timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});

timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


// const showSuccess = () => {
//   success.classList.remove('hidden');
//   document.addEventListener('keydown', (evt) => {
//     if (evt.keyCode === 27) {
//       success.classList.add('hidden');
//     }
//   });
//   document.addEventListener('click', () => {
//     success.classList.add('hidden');
//   });
// };


const blockForm = (status) => {
  status = status || false;
  window.map.noticeForm.classList.toggle('notice__form--disabled', status);

  fields.forEach(function (elem) {
    elem.disabled = status;
  });
};

const removeFieldsInvalidity = () => {
  window.map.noticeForm.querySelectorAll('input, select, textarea').forEach(function (item) {
    item.classList.remove('invalid');
  });
};

const resetCoordOfMainPin = () => {
  window.map.mapPinMain.style.left = window.map.defaultPosition.x + 'px';
  window.map.mapPinMain.style.top = window.map.defaultPosition.y + 'px';
  window.map.addValueToAddressInput();
};

const deactivationForm = () => {
  // const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  window.map.noticeForm.reset();
  window.card.closeModal();
  window.pin.hidePins(true);
  blockForm(true);
  window.map.makeMapOfFaded(true);
  resetCoordOfMainPin();
  window.map.allowToRenderingPins = true;
};

const onSuccess = () => {
  window.data.showMessage('Ваше объявление успешно размещено!');
}


window.map.noticeForm.addEventListener('submit', (evt) => {
  window.backend.save(new FormData(window.map.noticeForm), onSuccess, window.data.onError);
  evt.preventDefault();
  // showSuccess();
  deactivationForm();  
});


resetBtn.addEventListener('click', deactivationForm)

window.form = {
  blockForm: blockForm
};
'use strict';

{
  const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]);



  const cardTemplate = document.querySelector('template')
    .content
    .querySelector('.map__card');

  const filtersContainer = document.querySelector('.map__filters-container');


  const renderCard = () => {
    let cardElement = window.map.map.querySelector('.map__card');

    if (!cardElement) {
      cardElement = cardTemplate.cloneNode(true);
      window.map.map.insertBefore(cardElement, filtersContainer);
      hideElement(cardElement);

      const popupClose = cardElement.querySelector('.popup__close');
      popupClose.addEventListener('click', function () {
        hideElement(cardElement);
        const pinActive = window.map.map.querySelector('.map__pin--active');
        pinActive.classList.remove('map__pin--active');
        document.removeEventListener('keydown', onPopupEscPress);
      });
    }
  };


  const fillCard = (element, i) => {

    const pinData = window.data.pinsData[i];
    element.querySelector('.popup__title').textContent = pinData.offer.title;
    element.querySelector('.popup__text--address').textContent = pinData.offer.address;
    element.querySelector('.popup__text--price').textContent = pinData.offer.price + '₽/ночь';
    element.querySelector('.popup__type').textContent = typeOutput.get(pinData.offer.type);
    element.querySelector('.popup__text--capacity').textContent = `${pinData.offer.rooms} комнаты для ${pinData.offer.guests} гостей`;
    element.querySelector('.popup__text--time').textContent = `Заезд после ${pinData.offer.checkin}, выезд до ${pinData.offer.checkout}`;
    
    const popupFeatures = element.querySelector('.popup__features');
    popupFeatures.innerHTML = pinData.offer.features.reduce((acc, value) => {
      return `<li class="feature feature--${value}"></li> ${acc}`
    }, '');
    
    element.querySelector('.popup__description').textContent = pinData.offer.description;
    
    const popupPhotos = element.querySelector('.popup__photos');
    popupPhotos.innerHTML = pinData.offer.photos.reduce((acc, value) => {
      return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
    }, '');

    element.querySelector('.popup__avatar').src = pinData.author.avatar;

    return element;
  }

  const hideElement = (element) => {
    element.classList.add('hidden');
  };

  const showElement = (element) => {
    element.classList.remove('hidden');
  };


  const openModal = () => {
    const mapPins = window.pin.mapPins.querySelectorAll('.map__pin:not(.map__pin--main)');
    const card = window.map.map.querySelector('.map__card');

    mapPins.forEach((elem, i) => {
      elem.addEventListener('click', function () {
        closeModal();
        elem.classList.add('map__pin--active');
        fillCard(card, i);
        showElement(card);

        document.addEventListener('keydown', onPopupEscPress);
      });
    });

  };


  const closeModal = () => {
    const card = window.map.map.querySelector('.map__card');
    if (card) {
      hideElement(card);
      document.removeEventListener('keydown', onPopupEscPress);

      const activePin = window.pin.mapPins.querySelector('.map__pin--active');
      if (activePin) {
        activePin.classList.remove('map__pin--active');
      }
    }
  };

  const onPopupEscPress = function (evt) {
    if (evt.keyCode === 27) {
      closeModal();
    }
  };



  window.card = {
    renderCard,
    openModal,
    closeModal
  };


}
'use strict';

{

  const titleOffer = [
    'Большая уютная квартира',
    "Маленькая неуютная квартира", 
    "Огромный прекрасный дворец", 
    "Маленький ужасный дворец", 
    "Красивый гостевой домик", 
    "Некрасивый негостеприимный домик", 
    "Уютное бунгало далеко от моря", 
    "Неуютное бунгало по колено в воде"
  ]

  const typeOffer = [
    'palace', 'flat', 'house', 'bungalo'
  ]

  const checkinOffer = [
    '12:00', '13:00', '14:00'
  ]

  const featuresOffer = [
    "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
  ]

  const photosOffer = [
    "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
    "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
    "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
  ]


  const pinSize = {
    width: 50,
    height: 70
  };


  const randomizer = (min, max = false, arr) => {
    if (!Array.isArray(min)) {
      return Math.floor(min + Math.random() * (max + 1 - min));
    }
    const rand = Math.floor(Math.random() * (min.length));
    if (arr) {
      const copyArr = [...min];
      let newArr = [];
      for(let i = 0; i < max; i++) {
        newArr = [...newArr, randomizer(copyArr, true)];
      }
      return newArr;
    }
    if(max === false) {
      return min[rand];
    }
    return min.splice(rand, 1).join();
  }



  const makeArray = (maps) => {
    return maps.map((value, index) => {
      value = {
        author: {
          avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
        },
        location: {
          x: randomizer(300, 900),
          y: randomizer(130, 630)
        },
        offer: {
          title: randomizer(titleOffer, true),
          address: '',
          price: randomizer(1000, 1000000),
          type: randomizer(typeOffer),
          rooms: randomizer(1, 5),
          guests: randomizer(1, 10),
          checkin: randomizer(checkinOffer),
          checkout: randomizer(checkinOffer),
          features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
          description: '',
          photos: randomizer(photosOffer, photosOffer.length, true)
        }      
      }
      value.offer.address = `${value.location.x}, ${value.location.y}`
      return value;
    })
  }



  const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
  const pinsData = makeArray(maps);
  window.data = {
    pinsData,
    pinSizeWidth: pinSize.width,
    pinSizeHeight: pinSize.height
  }
}

'use strict';
{

}

const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const fields = window.map.noticeForm.querySelectorAll('fieldset');
const addressInput = window.map.noticeForm.querySelector('input[name="address"]');
const typeSelect = window.map.noticeForm.querySelector('select[name="type"]');
const priceInput = window.map.noticeForm.querySelector('input[name="price"]');
const timeInSelect = window.map.noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = window.map.noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = window.map.noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = window.map.noticeForm.querySelector('select[name="capacity"]');
const submitBtn = window.map.noticeForm.querySelector('.form__submit');
const resetBtn = window.map.noticeForm.querySelector('.form__reset');


const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}

typeSelect.addEventListener('change', changePriceFromType);


timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});

timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const blockForm = (status) => {
  status = status || false;
  window.map.noticeForm.classList.toggle('notice__form--disabled', status);

  fields.forEach(function (elem) {
    elem.disabled = status;
  });
};

const removeFieldsInvalidity = () => {
  window.map.noticeForm.querySelectorAll('input, select, textarea').forEach(function (item) {
    item.classList.remove('invalid');
  });
};

const resetCoordOfMainPin = () => {
  window.map.mapPinMain.style.left = window.map.defaultPosition.x + 'px';
  window.map.mapPinMain.style.top = window.map.defaultPosition.y + 'px';
  window.map.addValueToAddressInput();
};

const deactivationForm = () => {
  // const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  window.map.noticeForm.reset();
  window.card.closeModal();
  window.pin.hidePins(true);
  blockForm(true);
  window.map.makeMapOfFaded(true);
  resetCoordOfMainPin()
};



window.map.noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();  
});


resetBtn.addEventListener('click', deactivationForm)

window.form = {
  blockForm: blockForm
};
'use strict';

{

  const openModal = () => {
    const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
    mapPinsItems.forEach((elem, index) => {
      elem.addEventListener('click', () => {
        openItemPopup(index);
      });
    });
    for (let i = 0; i < formElements.length; i++) {
      formElements[i].disabled = false;
    }
    formHeader.disabled = false;
  }


  const openItemPopup = (i) => {
    const mapCardElement = mapCard.cloneNode();
    const mapFiltersContainer = document.querySelector('.map__filters-container');
    mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', 
      `<ul class="popup__features">
        ${pinsData[i].offer.features.reduce((acc, value) => {
          return `<li class="feature feature--${value}"></li> ${acc}`
        }, '')}
      </ul>`
    );
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', 
      `<div class="popup__photos">
        ${pinsData[i].offer.photos.reduce((acc, value) => {
          return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
        }, '')}
      </div>`);
    mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
    
    mapFiltersContainer.before(mapCardElement);
  }

}
'use strict';

{

  const titleOffer = [
    'Большая уютная квартира',
    "Маленькая неуютная квартира", 
    "Огромный прекрасный дворец", 
    "Маленький ужасный дворец", 
    "Красивый гостевой домик", 
    "Некрасивый негостеприимный домик", 
    "Уютное бунгало далеко от моря", 
    "Неуютное бунгало по колено в воде"
  ]

  const typeOffer = [
    'palace', 'flat', 'house', 'bungalo'
  ]

  const checkinOffer = [
    '12:00', '13:00', '14:00'
  ]

  const featuresOffer = [
    "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
  ]

  const photosOffer = [
    "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
    "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
    "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
  ]

  const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
  )


  const pinSize = {
    width: 50,
    height: 70
  };


  const randomizer = (min, max = false, arr) => {
    if (!Array.isArray(min)) {
      return Math.floor(min + Math.random() * (max + 1 - min));
    }
    const rand = Math.floor(Math.random() * (min.length));
    if (arr) {
      const copyArr = [...min];
      let newArr = [];
      for(let i = 0; i < max; i++) {
        newArr = [...newArr, randomizer(copyArr, true)];
      }
      return newArr;
    }
    if(max === false) {
      return min[rand];
    }
    return min.splice(rand, 1).join();
  }



  const makeArray = (maps) => {
    return maps.map((value, index) => {
      value = {
        author: {
          avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
        },
        location: {
          x: randomizer(300, 900) - pinSize.width/2,
          y: randomizer(130, 630) - pinSize.height/2
        },
        offer: {
          title: randomizer(titleOffer, true),
          address: '',
          price: randomizer(1000, 1000000),
          type: randomizer(typeOffer),
          rooms: randomizer(1, 5),
          guests: randomizer(1, 10),
          checkin: randomizer(checkinOffer),
          checkout: randomizer(checkinOffer),
          features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
          description: '',
          photos: randomizer(photosOffer, photosOffer.length, true)
        }      
      }
      value.offer.address = `${value.location.x}, ${value.location.y}`
      return value;
    })
  }



  const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
  window.pinsData = makeArray(maps);

}

window.map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}

formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}


const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}, ${mainPinY}`;
};



typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};



const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.style.left = (defaultPosition.x) + 'px';
  mapPinMain.style.top = (defaultPosition.y) + 'px';
  addValueToAddressInput();
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const pinMainSize = {
  width: 65,
  height: 65
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}`, `${mainPinY}`;
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}

const borderPosition = {
  xMin: 0,
  xMax: map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}


mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }

  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMin &&
      mapPinMain.offsetLeft - shift.x <= borderPosition.xMax &&
      mapPinMain.offsetTop - shift.y >= borderPosition.yMin &&
      mapPinMain.offsetTop - shift.y <= borderPosition.yMax) {
        mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
        mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }

    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    makePins();
    addValueToAddressInput();
    openModal();
    changePriceFromType();

    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})























const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const pinMainSize = {
  width: 65,
  height: 65
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const defaultPosition = {
  x: 570,
  y: 375
};


const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');



const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.classList.add('hidden');
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}


const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}, ${mainPinY}`;
};

makePins();

mapPinMain.style.left = defaultPosition.x + 'px';
mapPinMain.style.top = defaultPosition.y + 'px';
addValueToAddressInput();


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.classList.remove('hidden');
    elem.addEventListener('click', () => {
      console.log(pinsData);
      console.log(mapPinsItems);
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}

const borderPosition = {
  xMin: 0,
  xMax: map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}


mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }
  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
      mapPinMain.style.left = `${borderPosition.xMin}px`;
    } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
      mapPinMain.style.left = `${borderPosition.xMax}px`;
    } else {
      mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
    }
    if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
      mapPinMain.style.top = `${borderPosition.yMin}px`;
    } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
      mapPinMain.style.top = `${borderPosition.yMax}px`;
    } else {
      mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }


    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    addValueToAddressInput();
    changePriceFromType();
    openModal();
    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})























const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const pinMainSize = {
  width: 65,
  height: 85
};

const defaultPosition = {
  x: 570,
  y: 375
};



const borderPosition = {
  xMin: 0,
  xMax: window.map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}

const makePins = () => {  
  for(let i = 0; i < window.pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = window.pinsData[i].author.avatar;
    pinElement.style.left = `${window.pinsData[i].location.x}px`;
    pinElement.style.top = `${window.pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = window.pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}

mapPinMain.style.left = defaultPosition.x + 'px';
mapPinMain.style.top = defaultPosition.y + 'px';
addValueToAddressInput();

mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }

  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
      mapPinMain.style.left = `${borderPosition.xMin}px`;
    } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
      mapPinMain.style.left = `${borderPosition.xMax}px`;
    } else {
      mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
    }
    if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
      mapPinMain.style.top = `${borderPosition.yMin}px`;
    } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
      mapPinMain.style.top = `${borderPosition.yMax}px`;
    } else {
      mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }


    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    makePins();
    addValueToAddressInput();
    openModal();
    changePriceFromType();

    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})

const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const pinMainSize = {
  width: 65,
  height: 65
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}`, `${mainPinY}`;
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}

const borderPosition = {
  xMin: 0,
  xMax: map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}


mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }

  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMin &&
      mapPinMain.offsetLeft - shift.x <= borderPosition.xMax &&
      mapPinMain.offsetTop - shift.y >= borderPosition.yMin &&
      mapPinMain.offsetTop - shift.y <= borderPosition.yMax) {
        mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
        mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }

    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    makePins();
    addValueToAddressInput();
    openModal();
    changePriceFromType();

    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})























const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




'use strict';
{

  const map = document.querySelector('.map');
  const mapPinMain = document.querySelector('.map__pin--main');

  const noticeForm = document.querySelector('.notice__form');
  const addressInput = noticeForm.querySelector('input[name="address"]');
  
  const pinMainSize = {
    width: 65,
    height: 85
  };
  
  const defaultPosition = {
    x: 570,
    y: 375
  };

  const borderPosition = {
    xMin: 0,
    xMax: map.offsetWidth - pinMainSize.width,
    yMin: 130 - pinMainSize.height,
    yMax: 630 - pinMainSize.height
  }
  
  


  const makeMapOfFaded = (status) => {
    status = status || false;
    map.classList.toggle('map--faded', status);
  };

  const addValueToAddressInput = () => {
    const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
    const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
    addressInput.value = `${mainPinX}, ${mainPinY}`;
  };

  mapPinMain.style.left = defaultPosition.x + 'px';
  mapPinMain.style.top = defaultPosition.y + 'px';
  addValueToAddressInput();

  mapPinMain.addEventListener('mousedown', (evt) => {
    evt.preventDefault();

    let startCoords = {
      x: evt.clientX,
      y: evt.clientY
    }
    const onMouseMove = (moveEvt) => {
      moveEvt.preventDefault();
      
      const shift = {
        x: startCoords.x - moveEvt.clientX,
        y: startCoords.y - moveEvt.clientY
      }

      startCoords = {
        x: moveEvt.clientX,
        y: moveEvt.clientY
      }
      
      if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
        mapPinMain.style.left = `${borderPosition.xMin}px`;
      } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
        mapPinMain.style.left = `${borderPosition.xMax}px`;
      } else {
        mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
      }
      if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
        mapPinMain.style.top = `${borderPosition.yMin}px`;
      } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
        mapPinMain.style.top = `${borderPosition.yMax}px`;
      } else {
        mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
      }


      addValueToAddressInput()
    }

    const onMouseUp = (upEvt) => {    
      upEvt.preventDefault();


      makeMapOfFaded(false);
      window.form.blockForm(false);
      window.pin.hidePins(false);
      window.card.renderCard();
      addValueToAddressInput();
      window.card.openModal();
      document.removeEventListener('mousemove', onMouseMove);
      document.removeEventListener('mouseup', onMouseUp);
    }

    document.addEventListener('mousemove', onMouseMove);
    document.addEventListener('mouseup', onMouseUp);
  })


  window.map = {
    map,
    mapPinMain,
    noticeForm,
    makeMapOfFaded,
    defaultPosition,
    addValueToAddressInput
  }
}
'use strict';

{
  const template = document.querySelector('template');
  const mapPins = document.querySelector('.map__pins');
  const mapPinTemplate = template.content.querySelector('.map__pin');


  const makePins = () => {  
    const fragment = document.createDocumentFragment();

    for(let i = 0; i < window.data.pinsData.length; i++) {

      const pinElement = mapPinTemplate.cloneNode(true);

      pinElement.classList.add('hidden');

      pinElement.style.left = `${window.data.pinsData[i].location.x - window.data.pinSizeWidth / 2}px`;
      pinElement.style.top = `${window.data.pinsData[i].location.y - window.data.pinSizeHeight}px`;

      pinElement.querySelector('img').src = window.data.pinsData[i].author.avatar;
      pinElement.querySelector('img').alt = window.data.pinsData[i].offer.title;
      
      mapPins.appendChild(pinElement);  
    };

    return fragment;
  }


  const hidePins = (status) => {
    status = status || false;
    const mapPinsSmall = mapPins.querySelectorAll('.map__pins button:not(.map__pin--main)');
    mapPinsSmall.forEach((elem) => {
      elem.classList.toggle('hidden', status);
    });
  };



  mapPins.appendChild(makePins());
  
  window.pin = {
    mapPins,
    hidePins
  }


}











// const mapCard = template.content.querySelector('.map__card');

// mapPinMain.style.left = defaultPosition.x + 'px';
// mapPinMain.style.top = defaultPosition.y + 'px';
// addValueToAddressInput();

// mapPinMain.addEventListener('mousedown', (evt) => {
//   evt.preventDefault();
  
//   let startCoords = {
//     x: evt.clientX,
//     y: evt.clientY
//   }
  
//   const onMouseMove = (moveEvt) => {
//     moveEvt.preventDefault();
    
//     const shift = {
//       x: startCoords.x - moveEvt.clientX,
//       y: startCoords.y - moveEvt.clientY
//     }
    
//     startCoords = {
//       x: moveEvt.clientX,
//       y: moveEvt.clientY
//     }
    
//     if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
//       mapPinMain.style.left = `${borderPosition.xMin}px`;
//     } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
//       mapPinMain.style.left = `${borderPosition.xMax}px`;
//     } else {
//       mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
//     }
//     if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
//       mapPinMain.style.top = `${borderPosition.yMin}px`;
//     } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
//       mapPinMain.style.top = `${borderPosition.yMax}px`;
//     } else {
//       mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
//     }
    
    
//     addValueToAddressInput()
//   }
  
//   const onMouseUp = (upEvt) => {    
//     upEvt.preventDefault();
    
//     map.classList.remove('map--faded');
//     noticeForm.classList.remove('notice__form--disabled');
//     addValueToAddressInput();
//     openModal();
//     changePriceFromType();
    
//     document.removeEventListener('mousemove', onMouseMove);
//     document.removeEventListener('mouseup', onMouseUp);
//   }
  
//   document.addEventListener('mousemove', onMouseMove);
//   document.addEventListener('mouseup', onMouseUp);
// })

'use strict';

{

  const openModal = () => {
    const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
    mapPinsItems.forEach((elem, index) => {
      elem.addEventListener('click', () => {
        openItemPopup(index);
      });
    });
    for (let i = 0; i < formElements.length; i++) {
      formElements[i].disabled = false;
    }
    formHeader.disabled = false;
  }


  const openItemPopup = (i) => {
    const mapCardElement = mapCard.cloneNode();
    const mapFiltersContainer = document.querySelector('.map__filters-container');
    mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', 
      `<ul class="popup__features">
        ${pinsData[i].offer.features.reduce((acc, value) => {
          return `<li class="feature feature--${value}"></li> ${acc}`
        }, '')}
      </ul>`
    );
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', 
      `<div class="popup__photos">
        ${pinsData[i].offer.photos.reduce((acc, value) => {
          return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
        }, '')}
      </div>`);
    mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
    
    mapFiltersContainer.before(mapCardElement);
  }

}
'use strict';

{

  const titleOffer = [
    'Большая уютная квартира',
    "Маленькая неуютная квартира", 
    "Огромный прекрасный дворец", 
    "Маленький ужасный дворец", 
    "Красивый гостевой домик", 
    "Некрасивый негостеприимный домик", 
    "Уютное бунгало далеко от моря", 
    "Неуютное бунгало по колено в воде"
  ]

  const typeOffer = [
    'palace', 'flat', 'house', 'bungalo'
  ]

  const checkinOffer = [
    '12:00', '13:00', '14:00'
  ]

  const featuresOffer = [
    "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
  ]

  const photosOffer = [
    "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
    "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
    "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
  ]

  const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
  )


  const pinSize = {
    width: 50,
    height: 70
  };


  const randomizer = (min, max = false, arr) => {
    if (!Array.isArray(min)) {
      return Math.floor(min + Math.random() * (max + 1 - min));
    }
    const rand = Math.floor(Math.random() * (min.length));
    if (arr) {
      const copyArr = [...min];
      let newArr = [];
      for(let i = 0; i < max; i++) {
        newArr = [...newArr, randomizer(copyArr, true)];
      }
      return newArr;
    }
    if(max === false) {
      return min[rand];
    }
    return min.splice(rand, 1).join();
  }



  const makeArray = (maps) => {
    return maps.map((value, index) => {
      value = {
        author: {
          avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
        },
        location: {
          x: randomizer(300, 900) - pinSize.width/2,
          y: randomizer(130, 630) - pinSize.height/2
        },
        offer: {
          title: randomizer(titleOffer, true),
          address: '',
          price: randomizer(1000, 1000000),
          type: randomizer(typeOffer),
          rooms: randomizer(1, 5),
          guests: randomizer(1, 10),
          checkin: randomizer(checkinOffer),
          checkout: randomizer(checkinOffer),
          features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
          description: '',
          photos: randomizer(photosOffer, photosOffer.length, true)
        }      
      }
      value.offer.address = `${value.location.x}, ${value.location.y}`
      return value;
    })
  }



  const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
  window.pinsData = makeArray(maps);

}

window.map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}

formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}


const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}, ${mainPinY}`;
};



typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};



const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.style.left = (defaultPosition.x) + 'px';
  mapPinMain.style.top = (defaultPosition.y) + 'px';
  addValueToAddressInput();
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const pinMainSize = {
  width: 65,
  height: 65
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}`, `${mainPinY}`;
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}

const borderPosition = {
  xMin: 0,
  xMax: map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}


mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }

  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMin &&
      mapPinMain.offsetLeft - shift.x <= borderPosition.xMax &&
      mapPinMain.offsetTop - shift.y >= borderPosition.yMin &&
      mapPinMain.offsetTop - shift.y <= borderPosition.yMax) {
        mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
        mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }

    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    makePins();
    addValueToAddressInput();
    openModal();
    changePriceFromType();

    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})























const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const pinMainSize = {
  width: 65,
  height: 65
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const defaultPosition = {
  x: 570,
  y: 375
};


const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');



const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.classList.add('hidden');
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}


const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}, ${mainPinY}`;
};

makePins();

mapPinMain.style.left = defaultPosition.x + 'px';
mapPinMain.style.top = defaultPosition.y + 'px';
addValueToAddressInput();


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.classList.remove('hidden');
    elem.addEventListener('click', () => {
      console.log(pinsData);
      console.log(mapPinsItems);
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}

const borderPosition = {
  xMin: 0,
  xMax: map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}


mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }
  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
      mapPinMain.style.left = `${borderPosition.xMin}px`;
    } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
      mapPinMain.style.left = `${borderPosition.xMax}px`;
    } else {
      mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
    }
    if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
      mapPinMain.style.top = `${borderPosition.yMin}px`;
    } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
      mapPinMain.style.top = `${borderPosition.yMax}px`;
    } else {
      mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }


    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    addValueToAddressInput();
    changePriceFromType();
    openModal();
    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})























const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const pinMainSize = {
  width: 65,
  height: 85
};

const defaultPosition = {
  x: 570,
  y: 375
};



const borderPosition = {
  xMin: 0,
  xMax: window.map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}

const makePins = () => {  
  for(let i = 0; i < window.pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = window.pinsData[i].author.avatar;
    pinElement.style.left = `${window.pinsData[i].location.x}px`;
    pinElement.style.top = `${window.pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = window.pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}

mapPinMain.style.left = defaultPosition.x + 'px';
mapPinMain.style.top = defaultPosition.y + 'px';
addValueToAddressInput();

mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }

  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
      mapPinMain.style.left = `${borderPosition.xMin}px`;
    } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
      mapPinMain.style.left = `${borderPosition.xMax}px`;
    } else {
      mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
    }
    if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
      mapPinMain.style.top = `${borderPosition.yMin}px`;
    } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
      mapPinMain.style.top = `${borderPosition.yMax}px`;
    } else {
      mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }


    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    makePins();
    addValueToAddressInput();
    openModal();
    changePriceFromType();

    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})

const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const pinMainSize = {
  width: 65,
  height: 65
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}`, `${mainPinY}`;
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}

const borderPosition = {
  xMin: 0,
  xMax: map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}


mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }

  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMin &&
      mapPinMain.offsetLeft - shift.x <= borderPosition.xMax &&
      mapPinMain.offsetTop - shift.y >= borderPosition.yMin &&
      mapPinMain.offsetTop - shift.y <= borderPosition.yMax) {
        mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
        mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }

    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    makePins();
    addValueToAddressInput();
    openModal();
    changePriceFromType();

    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})























const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




'use strict';
{

  const map = document.querySelector('.map');
  const mapPinMain = document.querySelector('.map__pin--main');

  const noticeForm = document.querySelector('.notice__form');
  const addressInput = noticeForm.querySelector('input[name="address"]');
  
  const pinMainSize = {
    width: 65,
    height: 85
  };
  
  const defaultPosition = {
    x: 570,
    y: 375
  };

  const borderPosition = {
    xMin: 0,
    xMax: map.offsetWidth - pinMainSize.width,
    yMin: 130 - pinMainSize.height,
    yMax: 630 - pinMainSize.height
  }
  
  


  const makeMapOfFaded = (status) => {
    status = status || false;
    map.classList.toggle('map--faded', status);
  };

  const addValueToAddressInput = () => {
    const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
    const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
    addressInput.value = `${mainPinX}, ${mainPinY}`;
  };

  mapPinMain.style.left = defaultPosition.x + 'px';
  mapPinMain.style.top = defaultPosition.y + 'px';
  addValueToAddressInput();

  mapPinMain.addEventListener('mousedown', (evt) => {
    evt.preventDefault();

    let startCoords = {
      x: evt.clientX,
      y: evt.clientY
    }
    const onMouseMove = (moveEvt) => {
      moveEvt.preventDefault();
      
      const shift = {
        x: startCoords.x - moveEvt.clientX,
        y: startCoords.y - moveEvt.clientY
      }

      startCoords = {
        x: moveEvt.clientX,
        y: moveEvt.clientY
      }
      
      if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
        mapPinMain.style.left = `${borderPosition.xMin}px`;
      } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
        mapPinMain.style.left = `${borderPosition.xMax}px`;
      } else {
        mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
      }
      if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
        mapPinMain.style.top = `${borderPosition.yMin}px`;
      } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
        mapPinMain.style.top = `${borderPosition.yMax}px`;
      } else {
        mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
      }


      addValueToAddressInput()
    }

    const onMouseUp = (upEvt) => {    
      upEvt.preventDefault();


      makeMapOfFaded(false);
      window.form.blockForm(false);
      window.pin.hidePins(false);
      if (window.map.allowToRenderingPins) {
        window.pin.renderPins(window.data.data);
      }
      window.card.renderCard();
      addValueToAddressInput();

      
      window.card.openModal();
      window.map.allowToRenderingPins = false;
      document.removeEventListener('mousemove', onMouseMove);
      document.removeEventListener('mouseup', onMouseUp);
    }

    document.addEventListener('mousemove', onMouseMove);
    document.addEventListener('mouseup', onMouseUp);
  })


  window.map = {
    map,
    mapPinMain,
    noticeForm,
    makeMapOfFaded,
    defaultPosition,
    addValueToAddressInput,
    allowToRenderingPins: true
  }
}
'use strict';

{
  const template = document.querySelector('template');
  const mapPins = document.querySelector('.map__pins');
  const mapPinTemplate = template.content.querySelector('.map__pin');


  const makePins = (pin) => {  
    const pinElement = mapPinTemplate.cloneNode(true);

    // pinElement.classList.add('hidden');

    pinElement.style.left = `${pin.location.x - window.data.pinSizeWidth / 2}px`;
    pinElement.style.top = `${pin.location.y - window.data.pinSizeHeight}px`;

    pinElement.querySelector('img').src = pin.author.avatar;
    pinElement.querySelector('img').alt = pin.offer.title;
    
    return pinElement;
  }

  const renderPins = (pins) => {
    const fragment = document.createDocumentFragment();
    for (let i = 0; i < pins.length; i++) {
      fragment.appendChild(makePins(pins[i]));
    }
    mapPins.appendChild(fragment);
  }

  const hidePins = (status) => {
    status = status || false;
    const mapPinsSmall = mapPins.querySelectorAll('.map__pins button:not(.map__pin--main)');
    mapPinsSmall.forEach((elem) => {
      elem.classList.toggle('hidden', status);
    });
  };

  
  window.pin = {
    mapPins,
    renderPins,
    hidePins
  }


  

}











// const mapCard = template.content.querySelector('.map__card');

// mapPinMain.style.left = defaultPosition.x + 'px';
// mapPinMain.style.top = defaultPosition.y + 'px';
// addValueToAddressInput();

// mapPinMain.addEventListener('mousedown', (evt) => {
//   evt.preventDefault();
  
//   let startCoords = {
//     x: evt.clientX,
//     y: evt.clientY
//   }
  
//   const onMouseMove = (moveEvt) => {
//     moveEvt.preventDefault();
    
//     const shift = {
//       x: startCoords.x - moveEvt.clientX,
//       y: startCoords.y - moveEvt.clientY
//     }
    
//     startCoords = {
//       x: moveEvt.clientX,
//       y: moveEvt.clientY
//     }
    
//     if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
//       mapPinMain.style.left = `${borderPosition.xMin}px`;
//     } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
//       mapPinMain.style.left = `${borderPosition.xMax}px`;
//     } else {
//       mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
//     }
//     if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
//       mapPinMain.style.top = `${borderPosition.yMin}px`;
//     } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
//       mapPinMain.style.top = `${borderPosition.yMax}px`;
//     } else {
//       mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
//     }
    
    
//     addValueToAddressInput()
//   }
  
//   const onMouseUp = (upEvt) => {    
//     upEvt.preventDefault();
    
//     map.classList.remove('map--faded');
//     noticeForm.classList.remove('notice__form--disabled');
//     addValueToAddressInput();
//     openModal();
//     changePriceFromType();
    
//     document.removeEventListener('mousemove', onMouseMove);
//     document.removeEventListener('mouseup', onMouseUp);
//   }
  
//   document.addEventListener('mousemove', onMouseMove);
//   document.addEventListener('mouseup', onMouseUp);
// })

'use strict';

{
  const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]);



  const cardTemplate = document.querySelector('template')
    .content
    .querySelector('.map__card');

  const filtersContainer = document.querySelector('.map__filters-container');


  const renderCard = () => {
    let cardElement = window.map.map.querySelector('.map__card');

    if (!cardElement) {
      cardElement = cardTemplate.cloneNode(true);
      window.map.map.insertBefore(cardElement, filtersContainer);
      hideElement(cardElement);

      const popupClose = cardElement.querySelector('.popup__close');
      popupClose.addEventListener('click', function () {
        hideElement(cardElement);
        const pinActive = window.map.map.querySelector('.map__pin--active');
        pinActive.classList.remove('map__pin--active');
        document.removeEventListener('keydown', onPopupEscPress);
      });
    }
  };


  const fillCard = (element, i) => {

    const pinData = window.data.pinsData[i];
    element.querySelector('.popup__title').textContent = pinData.offer.title;
    element.querySelector('.popup__text--address').textContent = pinData.offer.address;
    element.querySelector('.popup__text--price').textContent = pinData.offer.price + '₽/ночь';
    element.querySelector('.popup__type').textContent = typeOutput.get(pinData.offer.type);
    element.querySelector('.popup__text--capacity').textContent = `${pinData.offer.rooms} комнаты для ${pinData.offer.guests} гостей`;
    element.querySelector('.popup__text--time').textContent = `Заезд после ${pinData.offer.checkin}, выезд до ${pinData.offer.checkout}`;
    
    const popupFeatures = element.querySelector('.popup__features');
    popupFeatures.innerHTML = pinData.offer.features.reduce((acc, value) => {
      return `<li class="feature feature--${value}"></li> ${acc}`
    }, '');
    
    element.querySelector('.popup__description').textContent = pinData.offer.description;
    
    const popupPhotos = element.querySelector('.popup__photos');
    popupPhotos.innerHTML = pinData.offer.photos.reduce((acc, value) => {
      return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
    }, '');

    element.querySelector('.popup__avatar').src = pinData.author.avatar;

    return element;
  }

  const hideElement = (element) => {
    element.classList.add('hidden');
  };

  const showElement = (element) => {
    element.classList.remove('hidden');
  };


  const openModal = () => {
    const mapPins = window.pin.mapPins.querySelectorAll('.map__pin:not(.map__pin--main)');
    const card = window.map.map.querySelector('.map__card');

    mapPins.forEach((elem, i) => {
      elem.addEventListener('click', function () {
        closeModal();
        elem.classList.add('map__pin--active');
        fillCard(card, i);
        showElement(card);

        document.addEventListener('keydown', onPopupEscPress);
      });
    });

  };


  const closeModal = () => {
    const card = window.map.map.querySelector('.map__card');
    if (card) {
      hideElement(card);
      document.removeEventListener('keydown', onPopupEscPress);

      const activePin = window.pin.mapPins.querySelector('.map__pin--active');
      if (activePin) {
        activePin.classList.remove('map__pin--active');
      }
    }
  };

  const onPopupEscPress = function (evt) {
    if (evt.keyCode === 27) {
      closeModal();
    }
  };



  window.card = {
    renderCard,
    openModal,
    closeModal
  };


}
'use strict';

{

  const titleOffer = [
    'Большая уютная квартира',
    "Маленькая неуютная квартира", 
    "Огромный прекрасный дворец", 
    "Маленький ужасный дворец", 
    "Красивый гостевой домик", 
    "Некрасивый негостеприимный домик", 
    "Уютное бунгало далеко от моря", 
    "Неуютное бунгало по колено в воде"
  ]

  const typeOffer = [
    'palace', 'flat', 'house', 'bungalo'
  ]

  const checkinOffer = [
    '12:00', '13:00', '14:00'
  ]

  const featuresOffer = [
    "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
  ]

  const photosOffer = [
    "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
    "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
    "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
  ]


  const pinSize = {
    width: 50,
    height: 70
  };


  const randomizer = (min, max = false, arr) => {
    if (!Array.isArray(min)) {
      return Math.floor(min + Math.random() * (max + 1 - min));
    }
    const rand = Math.floor(Math.random() * (min.length));
    if (arr) {
      const copyArr = [...min];
      let newArr = [];
      for(let i = 0; i < max; i++) {
        newArr = [...newArr, randomizer(copyArr, true)];
      }
      return newArr;
    }
    if(max === false) {
      return min[rand];
    }
    return min.splice(rand, 1).join();
  }



  const makeArray = (maps) => {
    return maps.map((value, index) => {
      value = {
        author: {
          avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
        },
        location: {
          x: randomizer(300, 900),
          y: randomizer(130, 630)
        },
        offer: {
          title: randomizer(titleOffer, true),
          address: '',
          price: randomizer(1000, 1000000),
          type: randomizer(typeOffer),
          rooms: randomizer(1, 5),
          guests: randomizer(1, 10),
          checkin: randomizer(checkinOffer),
          checkout: randomizer(checkinOffer),
          features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
          description: '',
          photos: randomizer(photosOffer, photosOffer.length, true)
        }      
      }
      value.offer.address = `${value.location.x}, ${value.location.y}`
      return value;
    })
  }



  const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
  const pinsData = makeArray(maps);
  window.data = {
    pinsData,
    pinSizeWidth: pinSize.width,
    pinSizeHeight: pinSize.height
  }
}

'use strict';
{

}

const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const fields = window.map.noticeForm.querySelectorAll('fieldset');
const addressInput = window.map.noticeForm.querySelector('input[name="address"]');
const typeSelect = window.map.noticeForm.querySelector('select[name="type"]');
const priceInput = window.map.noticeForm.querySelector('input[name="price"]');
const timeInSelect = window.map.noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = window.map.noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = window.map.noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = window.map.noticeForm.querySelector('select[name="capacity"]');
const submitBtn = window.map.noticeForm.querySelector('.form__submit');
const resetBtn = window.map.noticeForm.querySelector('.form__reset');


const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}

typeSelect.addEventListener('change', changePriceFromType);


timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});

timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const blockForm = (status) => {
  status = status || false;
  window.map.noticeForm.classList.toggle('notice__form--disabled', status);

  fields.forEach(function (elem) {
    elem.disabled = status;
  });
};

const removeFieldsInvalidity = () => {
  window.map.noticeForm.querySelectorAll('input, select, textarea').forEach(function (item) {
    item.classList.remove('invalid');
  });
};

const resetCoordOfMainPin = () => {
  window.map.mapPinMain.style.left = window.map.defaultPosition.x + 'px';
  window.map.mapPinMain.style.top = window.map.defaultPosition.y + 'px';
  window.map.addValueToAddressInput();
};

const deactivationForm = () => {
  // const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  window.map.noticeForm.reset();
  window.card.closeModal();
  window.pin.hidePins(true);
  blockForm(true);
  window.map.makeMapOfFaded(true);
  resetCoordOfMainPin()
};



window.map.noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();  
});


resetBtn.addEventListener('click', deactivationForm)

window.form = {
  blockForm: blockForm
};
'use strict';

{

  const openModal = () => {
    const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
    mapPinsItems.forEach((elem, index) => {
      elem.addEventListener('click', () => {
        openItemPopup(index);
      });
    });
    for (let i = 0; i < formElements.length; i++) {
      formElements[i].disabled = false;
    }
    formHeader.disabled = false;
  }


  const openItemPopup = (i) => {
    const mapCardElement = mapCard.cloneNode();
    const mapFiltersContainer = document.querySelector('.map__filters-container');
    mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', 
      `<ul class="popup__features">
        ${pinsData[i].offer.features.reduce((acc, value) => {
          return `<li class="feature feature--${value}"></li> ${acc}`
        }, '')}
      </ul>`
    );
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', 
      `<div class="popup__photos">
        ${pinsData[i].offer.photos.reduce((acc, value) => {
          return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
        }, '')}
      </div>`);
    mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
    
    mapFiltersContainer.before(mapCardElement);
  }

}
'use strict';

{

  const titleOffer = [
    'Большая уютная квартира',
    "Маленькая неуютная квартира", 
    "Огромный прекрасный дворец", 
    "Маленький ужасный дворец", 
    "Красивый гостевой домик", 
    "Некрасивый негостеприимный домик", 
    "Уютное бунгало далеко от моря", 
    "Неуютное бунгало по колено в воде"
  ]

  const typeOffer = [
    'palace', 'flat', 'house', 'bungalo'
  ]

  const checkinOffer = [
    '12:00', '13:00', '14:00'
  ]

  const featuresOffer = [
    "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
  ]

  const photosOffer = [
    "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
    "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
    "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
  ]

  const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
  )


  const pinSize = {
    width: 50,
    height: 70
  };


  const randomizer = (min, max = false, arr) => {
    if (!Array.isArray(min)) {
      return Math.floor(min + Math.random() * (max + 1 - min));
    }
    const rand = Math.floor(Math.random() * (min.length));
    if (arr) {
      const copyArr = [...min];
      let newArr = [];
      for(let i = 0; i < max; i++) {
        newArr = [...newArr, randomizer(copyArr, true)];
      }
      return newArr;
    }
    if(max === false) {
      return min[rand];
    }
    return min.splice(rand, 1).join();
  }



  const makeArray = (maps) => {
    return maps.map((value, index) => {
      value = {
        author: {
          avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
        },
        location: {
          x: randomizer(300, 900) - pinSize.width/2,
          y: randomizer(130, 630) - pinSize.height/2
        },
        offer: {
          title: randomizer(titleOffer, true),
          address: '',
          price: randomizer(1000, 1000000),
          type: randomizer(typeOffer),
          rooms: randomizer(1, 5),
          guests: randomizer(1, 10),
          checkin: randomizer(checkinOffer),
          checkout: randomizer(checkinOffer),
          features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
          description: '',
          photos: randomizer(photosOffer, photosOffer.length, true)
        }      
      }
      value.offer.address = `${value.location.x}, ${value.location.y}`
      return value;
    })
  }



  const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
  window.pinsData = makeArray(maps);

}

window.map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}

formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}


const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}, ${mainPinY}`;
};



typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};



const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.style.left = (defaultPosition.x) + 'px';
  mapPinMain.style.top = (defaultPosition.y) + 'px';
  addValueToAddressInput();
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const pinMainSize = {
  width: 65,
  height: 65
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}`, `${mainPinY}`;
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}

const borderPosition = {
  xMin: 0,
  xMax: map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}


mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }

  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMin &&
      mapPinMain.offsetLeft - shift.x <= borderPosition.xMax &&
      mapPinMain.offsetTop - shift.y >= borderPosition.yMin &&
      mapPinMain.offsetTop - shift.y <= borderPosition.yMax) {
        mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
        mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }

    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    makePins();
    addValueToAddressInput();
    openModal();
    changePriceFromType();

    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})























const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const pinMainSize = {
  width: 65,
  height: 65
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const defaultPosition = {
  x: 570,
  y: 375
};


const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');



const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.classList.add('hidden');
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}


const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}, ${mainPinY}`;
};

makePins();

mapPinMain.style.left = defaultPosition.x + 'px';
mapPinMain.style.top = defaultPosition.y + 'px';
addValueToAddressInput();


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.classList.remove('hidden');
    elem.addEventListener('click', () => {
      console.log(pinsData);
      console.log(mapPinsItems);
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}

const borderPosition = {
  xMin: 0,
  xMax: map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}


mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }
  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
      mapPinMain.style.left = `${borderPosition.xMin}px`;
    } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
      mapPinMain.style.left = `${borderPosition.xMax}px`;
    } else {
      mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
    }
    if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
      mapPinMain.style.top = `${borderPosition.yMin}px`;
    } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
      mapPinMain.style.top = `${borderPosition.yMax}px`;
    } else {
      mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }


    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    addValueToAddressInput();
    changePriceFromType();
    openModal();
    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})























const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const pinMainSize = {
  width: 65,
  height: 85
};

const defaultPosition = {
  x: 570,
  y: 375
};



const borderPosition = {
  xMin: 0,
  xMax: window.map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}

const makePins = () => {  
  for(let i = 0; i < window.pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = window.pinsData[i].author.avatar;
    pinElement.style.left = `${window.pinsData[i].location.x}px`;
    pinElement.style.top = `${window.pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = window.pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}

mapPinMain.style.left = defaultPosition.x + 'px';
mapPinMain.style.top = defaultPosition.y + 'px';
addValueToAddressInput();

mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }

  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
      mapPinMain.style.left = `${borderPosition.xMin}px`;
    } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
      mapPinMain.style.left = `${borderPosition.xMax}px`;
    } else {
      mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
    }
    if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
      mapPinMain.style.top = `${borderPosition.yMin}px`;
    } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
      mapPinMain.style.top = `${borderPosition.yMax}px`;
    } else {
      mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }


    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    makePins();
    addValueToAddressInput();
    openModal();
    changePriceFromType();

    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})

const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const pinMainSize = {
  width: 65,
  height: 65
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}`, `${mainPinY}`;
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}

const borderPosition = {
  xMin: 0,
  xMax: map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}


mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }

  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMin &&
      mapPinMain.offsetLeft - shift.x <= borderPosition.xMax &&
      mapPinMain.offsetTop - shift.y >= borderPosition.yMin &&
      mapPinMain.offsetTop - shift.y <= borderPosition.yMax) {
        mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
        mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }

    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    makePins();
    addValueToAddressInput();
    openModal();
    changePriceFromType();

    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})























const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




'use strict';
{

  const map = document.querySelector('.map');
  const mapPinMain = document.querySelector('.map__pin--main');

  const noticeForm = document.querySelector('.notice__form');
  const addressInput = noticeForm.querySelector('input[name="address"]');
  
  const pinMainSize = {
    width: 65,
    height: 85
  };
  
  const defaultPosition = {
    x: 570,
    y: 375
  };

  const borderPosition = {
    xMin: 0,
    xMax: map.offsetWidth - pinMainSize.width,
    yMin: 130 - pinMainSize.height,
    yMax: 630 - pinMainSize.height
  }
  
  


  const makeMapOfFaded = (status) => {
    status = status || false;
    map.classList.toggle('map--faded', status);
  };

  const addValueToAddressInput = () => {
    const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
    const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
    addressInput.value = `${mainPinX}, ${mainPinY}`;
  };

  mapPinMain.style.left = defaultPosition.x + 'px';
  mapPinMain.style.top = defaultPosition.y + 'px';
  addValueToAddressInput();

  mapPinMain.addEventListener('mousedown', (evt) => {
    evt.preventDefault();

    let startCoords = {
      x: evt.clientX,
      y: evt.clientY
    }
    const onMouseMove = (moveEvt) => {
      moveEvt.preventDefault();
      
      const shift = {
        x: startCoords.x - moveEvt.clientX,
        y: startCoords.y - moveEvt.clientY
      }

      startCoords = {
        x: moveEvt.clientX,
        y: moveEvt.clientY
      }
      
      if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
        mapPinMain.style.left = `${borderPosition.xMin}px`;
      } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
        mapPinMain.style.left = `${borderPosition.xMax}px`;
      } else {
        mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
      }
      if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
        mapPinMain.style.top = `${borderPosition.yMin}px`;
      } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
        mapPinMain.style.top = `${borderPosition.yMax}px`;
      } else {
        mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
      }


      addValueToAddressInput()
    }

    const onMouseUp = (upEvt) => {    
      upEvt.preventDefault();


      makeMapOfFaded(false);
      window.form.blockForm(false);
      window.pin.hidePins(false);
      window.card.renderCard();
      addValueToAddressInput();
      window.card.openModal();
      document.removeEventListener('mousemove', onMouseMove);
      document.removeEventListener('mouseup', onMouseUp);
    }

    document.addEventListener('mousemove', onMouseMove);
    document.addEventListener('mouseup', onMouseUp);
  })


  window.map = {
    map,
    mapPinMain,
    noticeForm,
    makeMapOfFaded,
    defaultPosition,
    addValueToAddressInput
  }
}
'use strict';

{
  const template = document.querySelector('template');
  const mapPins = document.querySelector('.map__pins');
  const mapPinTemplate = template.content.querySelector('.map__pin');


  const makePins = () => {  
    const fragment = document.createDocumentFragment();

    for(let i = 0; i < window.data.pinsData.length; i++) {

      const pinElement = mapPinTemplate.cloneNode(true);

      pinElement.classList.add('hidden');

      pinElement.style.left = `${window.data.pinsData[i].location.x - window.data.pinSizeWidth / 2}px`;
      pinElement.style.top = `${window.data.pinsData[i].location.y - window.data.pinSizeHeight}px`;

      pinElement.querySelector('img').src = window.data.pinsData[i].author.avatar;
      pinElement.querySelector('img').alt = window.data.pinsData[i].offer.title;
      
      mapPins.appendChild(pinElement);  
    };

    return fragment;
  }


  const hidePins = (status) => {
    status = status || false;
    const mapPinsSmall = mapPins.querySelectorAll('.map__pins button:not(.map__pin--main)');
    mapPinsSmall.forEach((elem) => {
      elem.classList.toggle('hidden', status);
    });
  };



  mapPins.appendChild(makePins());
  
  window.pin = {
    mapPins,
    hidePins
  }


}











// const mapCard = template.content.querySelector('.map__card');

// mapPinMain.style.left = defaultPosition.x + 'px';
// mapPinMain.style.top = defaultPosition.y + 'px';
// addValueToAddressInput();

// mapPinMain.addEventListener('mousedown', (evt) => {
//   evt.preventDefault();
  
//   let startCoords = {
//     x: evt.clientX,
//     y: evt.clientY
//   }
  
//   const onMouseMove = (moveEvt) => {
//     moveEvt.preventDefault();
    
//     const shift = {
//       x: startCoords.x - moveEvt.clientX,
//       y: startCoords.y - moveEvt.clientY
//     }
    
//     startCoords = {
//       x: moveEvt.clientX,
//       y: moveEvt.clientY
//     }
    
//     if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
//       mapPinMain.style.left = `${borderPosition.xMin}px`;
//     } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
//       mapPinMain.style.left = `${borderPosition.xMax}px`;
//     } else {
//       mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
//     }
//     if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
//       mapPinMain.style.top = `${borderPosition.yMin}px`;
//     } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
//       mapPinMain.style.top = `${borderPosition.yMax}px`;
//     } else {
//       mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
//     }
    
    
//     addValueToAddressInput()
//   }
  
//   const onMouseUp = (upEvt) => {    
//     upEvt.preventDefault();
    
//     map.classList.remove('map--faded');
//     noticeForm.classList.remove('notice__form--disabled');
//     addValueToAddressInput();
//     openModal();
//     changePriceFromType();
    
//     document.removeEventListener('mousemove', onMouseMove);
//     document.removeEventListener('mouseup', onMouseUp);
//   }
  
//   document.addEventListener('mousemove', onMouseMove);
//   document.addEventListener('mouseup', onMouseUp);
// })

'use strict';

{

  const openModal = () => {
    const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
    mapPinsItems.forEach((elem, index) => {
      elem.addEventListener('click', () => {
        openItemPopup(index);
      });
    });
    for (let i = 0; i < formElements.length; i++) {
      formElements[i].disabled = false;
    }
    formHeader.disabled = false;
  }


  const openItemPopup = (i) => {
    const mapCardElement = mapCard.cloneNode();
    const mapFiltersContainer = document.querySelector('.map__filters-container');
    mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', 
      `<ul class="popup__features">
        ${pinsData[i].offer.features.reduce((acc, value) => {
          return `<li class="feature feature--${value}"></li> ${acc}`
        }, '')}
      </ul>`
    );
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', 
      `<div class="popup__photos">
        ${pinsData[i].offer.photos.reduce((acc, value) => {
          return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
        }, '')}
      </div>`);
    mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
    
    mapFiltersContainer.before(mapCardElement);
  }

}
'use strict';

{

  const titleOffer = [
    'Большая уютная квартира',
    "Маленькая неуютная квартира", 
    "Огромный прекрасный дворец", 
    "Маленький ужасный дворец", 
    "Красивый гостевой домик", 
    "Некрасивый негостеприимный домик", 
    "Уютное бунгало далеко от моря", 
    "Неуютное бунгало по колено в воде"
  ]

  const typeOffer = [
    'palace', 'flat', 'house', 'bungalo'
  ]

  const checkinOffer = [
    '12:00', '13:00', '14:00'
  ]

  const featuresOffer = [
    "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
  ]

  const photosOffer = [
    "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
    "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
    "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
  ]

  const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
  )


  const pinSize = {
    width: 50,
    height: 70
  };


  const randomizer = (min, max = false, arr) => {
    if (!Array.isArray(min)) {
      return Math.floor(min + Math.random() * (max + 1 - min));
    }
    const rand = Math.floor(Math.random() * (min.length));
    if (arr) {
      const copyArr = [...min];
      let newArr = [];
      for(let i = 0; i < max; i++) {
        newArr = [...newArr, randomizer(copyArr, true)];
      }
      return newArr;
    }
    if(max === false) {
      return min[rand];
    }
    return min.splice(rand, 1).join();
  }



  const makeArray = (maps) => {
    return maps.map((value, index) => {
      value = {
        author: {
          avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
        },
        location: {
          x: randomizer(300, 900) - pinSize.width/2,
          y: randomizer(130, 630) - pinSize.height/2
        },
        offer: {
          title: randomizer(titleOffer, true),
          address: '',
          price: randomizer(1000, 1000000),
          type: randomizer(typeOffer),
          rooms: randomizer(1, 5),
          guests: randomizer(1, 10),
          checkin: randomizer(checkinOffer),
          checkout: randomizer(checkinOffer),
          features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
          description: '',
          photos: randomizer(photosOffer, photosOffer.length, true)
        }      
      }
      value.offer.address = `${value.location.x}, ${value.location.y}`
      return value;
    })
  }



  const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
  window.pinsData = makeArray(maps);

}

window.map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}

formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}


const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}, ${mainPinY}`;
};



typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};



const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.style.left = (defaultPosition.x) + 'px';
  mapPinMain.style.top = (defaultPosition.y) + 'px';
  addValueToAddressInput();
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const pinMainSize = {
  width: 65,
  height: 65
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}`, `${mainPinY}`;
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}

const borderPosition = {
  xMin: 0,
  xMax: map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}


mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }

  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMin &&
      mapPinMain.offsetLeft - shift.x <= borderPosition.xMax &&
      mapPinMain.offsetTop - shift.y >= borderPosition.yMin &&
      mapPinMain.offsetTop - shift.y <= borderPosition.yMax) {
        mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
        mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }

    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    makePins();
    addValueToAddressInput();
    openModal();
    changePriceFromType();

    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})























const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const pinMainSize = {
  width: 65,
  height: 65
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const defaultPosition = {
  x: 570,
  y: 375
};


const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');



const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.classList.add('hidden');
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}


const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}, ${mainPinY}`;
};

makePins();

mapPinMain.style.left = defaultPosition.x + 'px';
mapPinMain.style.top = defaultPosition.y + 'px';
addValueToAddressInput();


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.classList.remove('hidden');
    elem.addEventListener('click', () => {
      console.log(pinsData);
      console.log(mapPinsItems);
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}

const borderPosition = {
  xMin: 0,
  xMax: map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}


mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }
  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
      mapPinMain.style.left = `${borderPosition.xMin}px`;
    } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
      mapPinMain.style.left = `${borderPosition.xMax}px`;
    } else {
      mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
    }
    if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
      mapPinMain.style.top = `${borderPosition.yMin}px`;
    } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
      mapPinMain.style.top = `${borderPosition.yMax}px`;
    } else {
      mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }


    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    addValueToAddressInput();
    changePriceFromType();
    openModal();
    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})























const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const pinMainSize = {
  width: 65,
  height: 85
};

const defaultPosition = {
  x: 570,
  y: 375
};



const borderPosition = {
  xMin: 0,
  xMax: window.map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}

const makePins = () => {  
  for(let i = 0; i < window.pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = window.pinsData[i].author.avatar;
    pinElement.style.left = `${window.pinsData[i].location.x}px`;
    pinElement.style.top = `${window.pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = window.pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}

mapPinMain.style.left = defaultPosition.x + 'px';
mapPinMain.style.top = defaultPosition.y + 'px';
addValueToAddressInput();

mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }

  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
      mapPinMain.style.left = `${borderPosition.xMin}px`;
    } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
      mapPinMain.style.left = `${borderPosition.xMax}px`;
    } else {
      mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
    }
    if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
      mapPinMain.style.top = `${borderPosition.yMin}px`;
    } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
      mapPinMain.style.top = `${borderPosition.yMax}px`;
    } else {
      mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }


    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    makePins();
    addValueToAddressInput();
    openModal();
    changePriceFromType();

    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})

const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const pinMainSize = {
  width: 65,
  height: 65
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}`, `${mainPinY}`;
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}

const borderPosition = {
  xMin: 0,
  xMax: map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}


mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }

  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMin &&
      mapPinMain.offsetLeft - shift.x <= borderPosition.xMax &&
      mapPinMain.offsetTop - shift.y >= borderPosition.yMin &&
      mapPinMain.offsetTop - shift.y <= borderPosition.yMax) {
        mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
        mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }

    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    makePins();
    addValueToAddressInput();
    openModal();
    changePriceFromType();

    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})























const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




'use strict';
{

  const map = document.querySelector('.map');
  const mapPinMain = document.querySelector('.map__pin--main');

  const noticeForm = document.querySelector('.notice__form');
  const addressInput = noticeForm.querySelector('input[name="address"]');
  
  const pinMainSize = {
    width: 65,
    height: 85
  };
  
  const defaultPosition = {
    x: 570,
    y: 375
  };

  const borderPosition = {
    xMin: 0,
    xMax: map.offsetWidth - pinMainSize.width,
    yMin: 130 - pinMainSize.height,
    yMax: 630 - pinMainSize.height
  }
  
  


  const makeMapOfFaded = (status) => {
    status = status || false;
    map.classList.toggle('map--faded', status);
  };

  const addValueToAddressInput = () => {
    const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
    const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
    addressInput.value = `${mainPinX}, ${mainPinY}`;
  };

  mapPinMain.style.left = defaultPosition.x + 'px';
  mapPinMain.style.top = defaultPosition.y + 'px';
  addValueToAddressInput();

  mapPinMain.addEventListener('mousedown', (evt) => {
    evt.preventDefault();

    let startCoords = {
      x: evt.clientX,
      y: evt.clientY
    }
    const onMouseMove = (moveEvt) => {
      moveEvt.preventDefault();
      
      const shift = {
        x: startCoords.x - moveEvt.clientX,
        y: startCoords.y - moveEvt.clientY
      }

      startCoords = {
        x: moveEvt.clientX,
        y: moveEvt.clientY
      }
      
      if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
        mapPinMain.style.left = `${borderPosition.xMin}px`;
      } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
        mapPinMain.style.left = `${borderPosition.xMax}px`;
      } else {
        mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
      }
      if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
        mapPinMain.style.top = `${borderPosition.yMin}px`;
      } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
        mapPinMain.style.top = `${borderPosition.yMax}px`;
      } else {
        mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
      }


      addValueToAddressInput()
    }

    const onMouseUp = (upEvt) => {    
      upEvt.preventDefault();


      makeMapOfFaded(false);
      window.form.blockForm(false);
      window.pin.hidePins(false);
      if (window.map.allowToRenderingPins) {
        window.pin.renderPins(window.data.data);
      }
      window.card.renderCard();
      addValueToAddressInput();

      
      window.card.openModal();
      window.map.allowToRenderingPins = false;
      document.removeEventListener('mousemove', onMouseMove);
      document.removeEventListener('mouseup', onMouseUp);
    }

    document.addEventListener('mousemove', onMouseMove);
    document.addEventListener('mouseup', onMouseUp);
  })


  window.map = {
    map,
    mapPinMain,
    noticeForm,
    makeMapOfFaded,
    defaultPosition,
    addValueToAddressInput,
    allowToRenderingPins: true
  }
}
'use strict';

{
  const template = document.querySelector('template');
  const mapPins = document.querySelector('.map__pins');
  const mapPinTemplate = template.content.querySelector('.map__pin');


  const makePins = (pin) => {  
    const pinElement = mapPinTemplate.cloneNode(true);

    // pinElement.classList.add('hidden');

    pinElement.style.left = `${pin.location.x - window.data.pinSizeWidth / 2}px`;
    pinElement.style.top = `${pin.location.y - window.data.pinSizeHeight}px`;

    pinElement.querySelector('img').src = pin.author.avatar;
    pinElement.querySelector('img').alt = pin.offer.title;
    
    return pinElement;
  }

  const renderPins = (pins) => {
    const fragment = document.createDocumentFragment();
    for (let i = 0; i < pins.length; i++) {
      fragment.appendChild(makePins(pins[i]));
    }
    mapPins.appendChild(fragment);
  }

  const hidePins = (status) => {
    status = status || false;
    const mapPinsSmall = mapPins.querySelectorAll('.map__pins button:not(.map__pin--main)');
    mapPinsSmall.forEach((elem) => {
      elem.classList.toggle('hidden', status);
    });
  };

  
  window.pin = {
    mapPins,
    renderPins,
    hidePins
  }


  

}











// const mapCard = template.content.querySelector('.map__card');

// mapPinMain.style.left = defaultPosition.x + 'px';
// mapPinMain.style.top = defaultPosition.y + 'px';
// addValueToAddressInput();

// mapPinMain.addEventListener('mousedown', (evt) => {
//   evt.preventDefault();
  
//   let startCoords = {
//     x: evt.clientX,
//     y: evt.clientY
//   }
  
//   const onMouseMove = (moveEvt) => {
//     moveEvt.preventDefault();
    
//     const shift = {
//       x: startCoords.x - moveEvt.clientX,
//       y: startCoords.y - moveEvt.clientY
//     }
    
//     startCoords = {
//       x: moveEvt.clientX,
//       y: moveEvt.clientY
//     }
    
//     if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
//       mapPinMain.style.left = `${borderPosition.xMin}px`;
//     } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
//       mapPinMain.style.left = `${borderPosition.xMax}px`;
//     } else {
//       mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
//     }
//     if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
//       mapPinMain.style.top = `${borderPosition.yMin}px`;
//     } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
//       mapPinMain.style.top = `${borderPosition.yMax}px`;
//     } else {
//       mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
//     }
    
    
//     addValueToAddressInput()
//   }
  
//   const onMouseUp = (upEvt) => {    
//     upEvt.preventDefault();
    
//     map.classList.remove('map--faded');
//     noticeForm.classList.remove('notice__form--disabled');
//     addValueToAddressInput();
//     openModal();
//     changePriceFromType();
    
//     document.removeEventListener('mousemove', onMouseMove);
//     document.removeEventListener('mouseup', onMouseUp);
//   }
  
//   document.addEventListener('mousemove', onMouseMove);
//   document.addEventListener('mouseup', onMouseUp);
// })

'use-strict';

{
  const urlPost = 'https://js.dump.academy/keksobooking';
  const urlGet = 'https://js.dump.academy/keksobooking/data';

  const request = (onLoad, onError) => {
    const xhr = new XMLHttpRequest();
    xhr.responseType = 'json';

    xhr.addEventListener('load', () => {
      if (xhr.status === 200) {
        onLoad(xhr.response);
      } else {
        onError(`Статус ответа: ${xhr.status} ${xhr.statusText}`);
      }
    });
    
    xhr.addEventListener('error', () => {
      onError('Произошла ошибка соединения');
    });
    xhr.addEventListener('timeout', () => {
      onError(`Запрос не успел выполниться за ${xhr.timeout}мс`);
    });

    return xhr;
  }



  const save = (data, onLoad, onError) => {
    const xhr = request(onLoad, onError);

    xhr.open('POST', urlPost);
    xhr.send(data);
    
  }



  const load = (onLoad, onError) => {
    const xhr = request(onLoad, onError);
    
    xhr.open('GET', urlGet);
    xhr.send();

  }

  window.backend = {
    save,
    load
  }
}
'use strict';

{
  const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]);



  const cardTemplate = document.querySelector('template')
    .content
    .querySelector('.map__card');

  const filtersContainer = document.querySelector('.map__filters-container');


  const renderCard = () => {
    let cardElement = window.map.map.querySelector('.map__card');

    if (!cardElement) {
      cardElement = cardTemplate.cloneNode(true);
      window.map.map.insertBefore(cardElement, filtersContainer);
      hideElement(cardElement);

      const popupClose = cardElement.querySelector('.popup__close');
      popupClose.addEventListener('click', function () {
        hideElement(cardElement);
        const pinActive = window.map.map.querySelector('.map__pin--active');
        pinActive.classList.remove('map__pin--active');
        document.removeEventListener('keydown', onPopupEscPress);
      });
    }
  };


  const fillCard = (element, i) => {

    const pinData = window.data.data[i];
    element.querySelector('.popup__title').textContent = pinData.offer.title;
    element.querySelector('.popup__text--address').textContent = pinData.offer.address;
    element.querySelector('.popup__text--price').textContent = pinData.offer.price + '₽/ночь';
    element.querySelector('.popup__type').textContent = typeOutput.get(pinData.offer.type);
    element.querySelector('.popup__text--capacity').textContent = `${pinData.offer.rooms} комнаты для ${pinData.offer.guests} гостей`;
    element.querySelector('.popup__text--time').textContent = `Заезд после ${pinData.offer.checkin}, выезд до ${pinData.offer.checkout}`;
    
    const popupFeatures = element.querySelector('.popup__features');
    popupFeatures.innerHTML = pinData.offer.features.reduce((acc, value) => {
      return `<li class="feature feature--${value}"></li> ${acc}`
    }, '');
    
    element.querySelector('.popup__description').textContent = pinData.offer.description;
    
    const popupPhotos = element.querySelector('.popup__photos');
    popupPhotos.innerHTML = pinData.offer.photos.reduce((acc, value) => {
      return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
    }, '');

    element.querySelector('.popup__avatar').src = pinData.author.avatar;

    return element;
  }

  const hideElement = (element) => {
    element.classList.add('hidden');
  };

  const showElement = (element) => {
    element.classList.remove('hidden');
  };


  const openModal = () => {
    const mapPins = window.pin.mapPins.querySelectorAll('.map__pin:not(.map__pin--main)');
    const card = window.map.map.querySelector('.map__card');

    mapPins.forEach((elem, i) => {
      elem.addEventListener('click', function () {
        closeModal();
        elem.classList.add('map__pin--active');
        fillCard(card, i);
        showElement(card);

        document.addEventListener('keydown', onPopupEscPress);
      });
    });

  };


  const closeModal = () => {
    const card = window.map.map.querySelector('.map__card');
    if (card) {
      hideElement(card);
      document.removeEventListener('keydown', onPopupEscPress);

      const activePin = window.pin.mapPins.querySelector('.map__pin--active');
      if (activePin) {
        activePin.classList.remove('map__pin--active');
      }
    }
  };

  const onPopupEscPress = function (evt) {
    if (evt.keyCode === 27) {
      closeModal();
    }
  };



  window.card = {
    renderCard,
    openModal,
    closeModal
  };


}
'use strict';

{

  // const titleOffer = [
  //   'Большая уютная квартира',
  //   "Маленькая неуютная квартира", 
  //   "Огромный прекрасный дворец", 
  //   "Маленький ужасный дворец", 
  //   "Красивый гостевой домик", 
  //   "Некрасивый негостеприимный домик", 
  //   "Уютное бунгало далеко от моря", 
  //   "Неуютное бунгало по колено в воде"
  // ]

  // const typeOffer = [
  //   'palace', 'flat', 'house', 'bungalo'
  // ]

  // const checkinOffer = [
  //   '12:00', '13:00', '14:00'
  // ]

  // const featuresOffer = [
  //   "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
  // ]

  // const photosOffer = [
  //   "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  //   "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  //   "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
  // ]


  const pinSize = {
    width: 50,
    height: 70
  };


  // const randomizer = (min, max = false, arr) => {
  //   if (!Array.isArray(min)) {
  //     return Math.floor(min + Math.random() * (max + 1 - min));
  //   }
  //   const rand = Math.floor(Math.random() * (min.length));
  //   if (arr) {
  //     const copyArr = [...min];
  //     let newArr = [];
  //     for(let i = 0; i < max; i++) {
  //       newArr = [...newArr, randomizer(copyArr, true)];
  //     }
  //     return newArr;
  //   }
  //   if(max === false) {
  //     return min[rand];
  //   }
  //   return min.splice(rand, 1).join();
  // }



  // const makeArray = (maps) => {
  //   return maps.map((value, index) => {
  //     value = {
  //       author: {
  //         avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
  //       },
  //       location: {
  //         x: randomizer(300, 900),
  //         y: randomizer(130, 630)
  //       },
  //       offer: {
  //         title: randomizer(titleOffer, true),
  //         address: '',
  //         price: randomizer(1000, 1000000),
  //         type: randomizer(typeOffer),
  //         rooms: randomizer(1, 5),
  //         guests: randomizer(1, 10),
  //         checkin: randomizer(checkinOffer),
  //         checkout: randomizer(checkinOffer),
  //         features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
  //         description: '',
  //         photos: randomizer(photosOffer, photosOffer.length, true)
  //       }      
  //     }
  //     value.offer.address = `${value.location.x}, ${value.location.y}`
  //     return value;
  //   })
  // }



  // const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
  // const pinsData = makeArray(maps);

  const onLoad = (array) => {
    window.data.data = array;
  };

  const onError = (message) => {
    showMessage(message);
  };

  window.backend.load(onLoad, onError);



  const messageBlock = document.querySelector('.success');
  const textMessage = messageBlock.querySelector('.success__message');

  const onMessageClick = () => {
    messageBlock.classList.add('hidden');
    document.removeEventListener('click', onMessageClick);
    document.removeEventListener('keydown', onMessageEscPress);
  };
  
  const onMessageEscPress = (evt) => {
    if (evt.keyCode === 27) {
      messageBlock.classList.add('hidden');
      document.removeEventListener('click', onMessageClick);
      document.removeEventListener('keydown', onMessageEscPress);
    }
  };
  
  const hideMessageByTime = () => {
    setTimeout(() => {
      messageBlock.classList.add('hidden');
      document.removeEventListener('click', onMessageClick);
      document.removeEventListener('keydown', onMessageEscPress);
    }, 5000);
  };
  
  const showMessage = (message) => {
    messageBlock.classList.remove('hidden');
    textMessage.textContent = message;

    document.addEventListener('click', onMessageClick);
    document.addEventListener('keydown', onMessageEscPress);

    hideMessageByTime();
  };
  
  
  window.data = {
    pinSizeWidth: pinSize.width,
    pinSizeHeight: pinSize.height,
    showMessage,
    onError
  }
}

'use strict';
{

}

const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const fields = window.map.noticeForm.querySelectorAll('fieldset');
const addressInput = window.map.noticeForm.querySelector('input[name="address"]');
const typeSelect = window.map.noticeForm.querySelector('select[name="type"]');
const priceInput = window.map.noticeForm.querySelector('input[name="price"]');
const timeInSelect = window.map.noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = window.map.noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = window.map.noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = window.map.noticeForm.querySelector('select[name="capacity"]');
const submitBtn = window.map.noticeForm.querySelector('.form__submit');
const resetBtn = window.map.noticeForm.querySelector('.form__reset');


const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}

typeSelect.addEventListener('change', changePriceFromType);
changePriceFromType();

timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});

timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


// const showSuccess = () => {
//   success.classList.remove('hidden');
//   document.addEventListener('keydown', (evt) => {
//     if (evt.keyCode === 27) {
//       success.classList.add('hidden');
//     }
//   });
//   document.addEventListener('click', () => {
//     success.classList.add('hidden');
//   });
// };


const blockForm = (status) => {
  status = status || false;
  window.map.noticeForm.classList.toggle('notice__form--disabled', status);

  fields.forEach(function (elem) {
    elem.disabled = status;
  });
};

const removeFieldsInvalidity = () => {
  window.map.noticeForm.querySelectorAll('input, select, textarea').forEach(function (item) {
    item.classList.remove('invalid');
  });
};

const resetCoordOfMainPin = () => {
  window.map.mapPinMain.style.left = window.map.defaultPosition.x + 'px';
  window.map.mapPinMain.style.top = window.map.defaultPosition.y + 'px';
  window.map.addValueToAddressInput();
};

const deactivationForm = () => {
  // const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  window.map.noticeForm.reset();
  window.card.closeModal();
  window.pin.hidePins(true);
  blockForm(true);
  window.map.makeMapOfFaded(true);
  resetCoordOfMainPin();
  window.map.allowToRenderingPins = true;
};

const onSuccess = () => {
  window.data.showMessage('Ваше объявление успешно размещено!');
}


window.map.noticeForm.addEventListener('submit', (evt) => {
  window.backend.save(new FormData(window.map.noticeForm), onSuccess, window.data.onError);
  evt.preventDefault();
  // showSuccess();
  deactivationForm();  
});


resetBtn.addEventListener('click', deactivationForm)

window.form = {
  blockForm: blockForm
};
'use strict';

{
  const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]);



  const cardTemplate = document.querySelector('template')
    .content
    .querySelector('.map__card');

  const filtersContainer = document.querySelector('.map__filters-container');


  const renderCard = () => {
    let cardElement = window.map.map.querySelector('.map__card');

    if (!cardElement) {
      cardElement = cardTemplate.cloneNode(true);
      window.map.map.insertBefore(cardElement, filtersContainer);
      hideElement(cardElement);

      const popupClose = cardElement.querySelector('.popup__close');
      popupClose.addEventListener('click', function () {
        hideElement(cardElement);
        const pinActive = window.map.map.querySelector('.map__pin--active');
        pinActive.classList.remove('map__pin--active');
        document.removeEventListener('keydown', onPopupEscPress);
      });
    }
  };


  const fillCard = (element, i) => {

    const pinData = window.data.pinsData[i];
    element.querySelector('.popup__title').textContent = pinData.offer.title;
    element.querySelector('.popup__text--address').textContent = pinData.offer.address;
    element.querySelector('.popup__text--price').textContent = pinData.offer.price + '₽/ночь';
    element.querySelector('.popup__type').textContent = typeOutput.get(pinData.offer.type);
    element.querySelector('.popup__text--capacity').textContent = `${pinData.offer.rooms} комнаты для ${pinData.offer.guests} гостей`;
    element.querySelector('.popup__text--time').textContent = `Заезд после ${pinData.offer.checkin}, выезд до ${pinData.offer.checkout}`;
    
    const popupFeatures = element.querySelector('.popup__features');
    popupFeatures.innerHTML = pinData.offer.features.reduce((acc, value) => {
      return `<li class="feature feature--${value}"></li> ${acc}`
    }, '');
    
    element.querySelector('.popup__description').textContent = pinData.offer.description;
    
    const popupPhotos = element.querySelector('.popup__photos');
    popupPhotos.innerHTML = pinData.offer.photos.reduce((acc, value) => {
      return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
    }, '');

    element.querySelector('.popup__avatar').src = pinData.author.avatar;

    return element;
  }

  const hideElement = (element) => {
    element.classList.add('hidden');
  };

  const showElement = (element) => {
    element.classList.remove('hidden');
  };


  const openModal = () => {
    const mapPins = window.pin.mapPins.querySelectorAll('.map__pin:not(.map__pin--main)');
    const card = window.map.map.querySelector('.map__card');

    mapPins.forEach((elem, i) => {
      elem.addEventListener('click', function () {
        closeModal();
        elem.classList.add('map__pin--active');
        fillCard(card, i);
        showElement(card);

        document.addEventListener('keydown', onPopupEscPress);
      });
    });

  };


  const closeModal = () => {
    const card = window.map.map.querySelector('.map__card');
    if (card) {
      hideElement(card);
      document.removeEventListener('keydown', onPopupEscPress);

      const activePin = window.pin.mapPins.querySelector('.map__pin--active');
      if (activePin) {
        activePin.classList.remove('map__pin--active');
      }
    }
  };

  const onPopupEscPress = function (evt) {
    if (evt.keyCode === 27) {
      closeModal();
    }
  };



  window.card = {
    renderCard,
    openModal,
    closeModal
  };


}
'use strict';

{

  const titleOffer = [
    'Большая уютная квартира',
    "Маленькая неуютная квартира", 
    "Огромный прекрасный дворец", 
    "Маленький ужасный дворец", 
    "Красивый гостевой домик", 
    "Некрасивый негостеприимный домик", 
    "Уютное бунгало далеко от моря", 
    "Неуютное бунгало по колено в воде"
  ]

  const typeOffer = [
    'palace', 'flat', 'house', 'bungalo'
  ]

  const checkinOffer = [
    '12:00', '13:00', '14:00'
  ]

  const featuresOffer = [
    "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
  ]

  const photosOffer = [
    "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
    "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
    "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
  ]


  const pinSize = {
    width: 50,
    height: 70
  };


  const randomizer = (min, max = false, arr) => {
    if (!Array.isArray(min)) {
      return Math.floor(min + Math.random() * (max + 1 - min));
    }
    const rand = Math.floor(Math.random() * (min.length));
    if (arr) {
      const copyArr = [...min];
      let newArr = [];
      for(let i = 0; i < max; i++) {
        newArr = [...newArr, randomizer(copyArr, true)];
      }
      return newArr;
    }
    if(max === false) {
      return min[rand];
    }
    return min.splice(rand, 1).join();
  }



  const makeArray = (maps) => {
    return maps.map((value, index) => {
      value = {
        author: {
          avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
        },
        location: {
          x: randomizer(300, 900),
          y: randomizer(130, 630)
        },
        offer: {
          title: randomizer(titleOffer, true),
          address: '',
          price: randomizer(1000, 1000000),
          type: randomizer(typeOffer),
          rooms: randomizer(1, 5),
          guests: randomizer(1, 10),
          checkin: randomizer(checkinOffer),
          checkout: randomizer(checkinOffer),
          features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
          description: '',
          photos: randomizer(photosOffer, photosOffer.length, true)
        }      
      }
      value.offer.address = `${value.location.x}, ${value.location.y}`
      return value;
    })
  }



  const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
  const pinsData = makeArray(maps);
  window.data = {
    pinsData,
    pinSizeWidth: pinSize.width,
    pinSizeHeight: pinSize.height
  }
}

'use strict';
{

}

const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const fields = window.map.noticeForm.querySelectorAll('fieldset');
const addressInput = window.map.noticeForm.querySelector('input[name="address"]');
const typeSelect = window.map.noticeForm.querySelector('select[name="type"]');
const priceInput = window.map.noticeForm.querySelector('input[name="price"]');
const timeInSelect = window.map.noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = window.map.noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = window.map.noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = window.map.noticeForm.querySelector('select[name="capacity"]');
const submitBtn = window.map.noticeForm.querySelector('.form__submit');
const resetBtn = window.map.noticeForm.querySelector('.form__reset');


const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}

typeSelect.addEventListener('change', changePriceFromType);


timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});

timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const blockForm = (status) => {
  status = status || false;
  window.map.noticeForm.classList.toggle('notice__form--disabled', status);

  fields.forEach(function (elem) {
    elem.disabled = status;
  });
};

const removeFieldsInvalidity = () => {
  window.map.noticeForm.querySelectorAll('input, select, textarea').forEach(function (item) {
    item.classList.remove('invalid');
  });
};

const resetCoordOfMainPin = () => {
  window.map.mapPinMain.style.left = window.map.defaultPosition.x + 'px';
  window.map.mapPinMain.style.top = window.map.defaultPosition.y + 'px';
  window.map.addValueToAddressInput();
};

const deactivationForm = () => {
  // const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  window.map.noticeForm.reset();
  window.card.closeModal();
  window.pin.hidePins(true);
  blockForm(true);
  window.map.makeMapOfFaded(true);
  resetCoordOfMainPin()
};



window.map.noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();  
});


resetBtn.addEventListener('click', deactivationForm)

window.form = {
  blockForm: blockForm
};
'use strict';

{

  const openModal = () => {
    const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
    mapPinsItems.forEach((elem, index) => {
      elem.addEventListener('click', () => {
        openItemPopup(index);
      });
    });
    for (let i = 0; i < formElements.length; i++) {
      formElements[i].disabled = false;
    }
    formHeader.disabled = false;
  }


  const openItemPopup = (i) => {
    const mapCardElement = mapCard.cloneNode();
    const mapFiltersContainer = document.querySelector('.map__filters-container');
    mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', 
      `<ul class="popup__features">
        ${pinsData[i].offer.features.reduce((acc, value) => {
          return `<li class="feature feature--${value}"></li> ${acc}`
        }, '')}
      </ul>`
    );
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', 
      `<div class="popup__photos">
        ${pinsData[i].offer.photos.reduce((acc, value) => {
          return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
        }, '')}
      </div>`);
    mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
    
    mapFiltersContainer.before(mapCardElement);
  }

}
'use strict';

{

  const titleOffer = [
    'Большая уютная квартира',
    "Маленькая неуютная квартира", 
    "Огромный прекрасный дворец", 
    "Маленький ужасный дворец", 
    "Красивый гостевой домик", 
    "Некрасивый негостеприимный домик", 
    "Уютное бунгало далеко от моря", 
    "Неуютное бунгало по колено в воде"
  ]

  const typeOffer = [
    'palace', 'flat', 'house', 'bungalo'
  ]

  const checkinOffer = [
    '12:00', '13:00', '14:00'
  ]

  const featuresOffer = [
    "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
  ]

  const photosOffer = [
    "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
    "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
    "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
  ]

  const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
  )


  const pinSize = {
    width: 50,
    height: 70
  };


  const randomizer = (min, max = false, arr) => {
    if (!Array.isArray(min)) {
      return Math.floor(min + Math.random() * (max + 1 - min));
    }
    const rand = Math.floor(Math.random() * (min.length));
    if (arr) {
      const copyArr = [...min];
      let newArr = [];
      for(let i = 0; i < max; i++) {
        newArr = [...newArr, randomizer(copyArr, true)];
      }
      return newArr;
    }
    if(max === false) {
      return min[rand];
    }
    return min.splice(rand, 1).join();
  }



  const makeArray = (maps) => {
    return maps.map((value, index) => {
      value = {
        author: {
          avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
        },
        location: {
          x: randomizer(300, 900) - pinSize.width/2,
          y: randomizer(130, 630) - pinSize.height/2
        },
        offer: {
          title: randomizer(titleOffer, true),
          address: '',
          price: randomizer(1000, 1000000),
          type: randomizer(typeOffer),
          rooms: randomizer(1, 5),
          guests: randomizer(1, 10),
          checkin: randomizer(checkinOffer),
          checkout: randomizer(checkinOffer),
          features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
          description: '',
          photos: randomizer(photosOffer, photosOffer.length, true)
        }      
      }
      value.offer.address = `${value.location.x}, ${value.location.y}`
      return value;
    })
  }



  const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
  window.pinsData = makeArray(maps);

}

window.map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}

formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}


const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}, ${mainPinY}`;
};



typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};



const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.style.left = (defaultPosition.x) + 'px';
  mapPinMain.style.top = (defaultPosition.y) + 'px';
  addValueToAddressInput();
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const pinMainSize = {
  width: 65,
  height: 65
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}`, `${mainPinY}`;
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}

const borderPosition = {
  xMin: 0,
  xMax: map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}


mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }

  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMin &&
      mapPinMain.offsetLeft - shift.x <= borderPosition.xMax &&
      mapPinMain.offsetTop - shift.y >= borderPosition.yMin &&
      mapPinMain.offsetTop - shift.y <= borderPosition.yMax) {
        mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
        mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }

    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    makePins();
    addValueToAddressInput();
    openModal();
    changePriceFromType();

    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})























const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const pinMainSize = {
  width: 65,
  height: 65
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const defaultPosition = {
  x: 570,
  y: 375
};


const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');



const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.classList.add('hidden');
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}


const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}, ${mainPinY}`;
};

makePins();

mapPinMain.style.left = defaultPosition.x + 'px';
mapPinMain.style.top = defaultPosition.y + 'px';
addValueToAddressInput();


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.classList.remove('hidden');
    elem.addEventListener('click', () => {
      console.log(pinsData);
      console.log(mapPinsItems);
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}

const borderPosition = {
  xMin: 0,
  xMax: map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}


mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }
  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
      mapPinMain.style.left = `${borderPosition.xMin}px`;
    } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
      mapPinMain.style.left = `${borderPosition.xMax}px`;
    } else {
      mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
    }
    if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
      mapPinMain.style.top = `${borderPosition.yMin}px`;
    } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
      mapPinMain.style.top = `${borderPosition.yMax}px`;
    } else {
      mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }


    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    addValueToAddressInput();
    changePriceFromType();
    openModal();
    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})























const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const pinMainSize = {
  width: 65,
  height: 85
};

const defaultPosition = {
  x: 570,
  y: 375
};



const borderPosition = {
  xMin: 0,
  xMax: window.map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}

const makePins = () => {  
  for(let i = 0; i < window.pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = window.pinsData[i].author.avatar;
    pinElement.style.left = `${window.pinsData[i].location.x}px`;
    pinElement.style.top = `${window.pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = window.pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}

mapPinMain.style.left = defaultPosition.x + 'px';
mapPinMain.style.top = defaultPosition.y + 'px';
addValueToAddressInput();

mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }

  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
      mapPinMain.style.left = `${borderPosition.xMin}px`;
    } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
      mapPinMain.style.left = `${borderPosition.xMax}px`;
    } else {
      mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
    }
    if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
      mapPinMain.style.top = `${borderPosition.yMin}px`;
    } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
      mapPinMain.style.top = `${borderPosition.yMax}px`;
    } else {
      mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }


    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    makePins();
    addValueToAddressInput();
    openModal();
    changePriceFromType();

    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})

const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const pinMainSize = {
  width: 65,
  height: 65
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}`, `${mainPinY}`;
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}

const borderPosition = {
  xMin: 0,
  xMax: map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}


mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }

  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMin &&
      mapPinMain.offsetLeft - shift.x <= borderPosition.xMax &&
      mapPinMain.offsetTop - shift.y >= borderPosition.yMin &&
      mapPinMain.offsetTop - shift.y <= borderPosition.yMax) {
        mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
        mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }

    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    makePins();
    addValueToAddressInput();
    openModal();
    changePriceFromType();

    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})























const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




'use strict';
{

  const map = document.querySelector('.map');
  const mapPinMain = document.querySelector('.map__pin--main');

  const noticeForm = document.querySelector('.notice__form');
  const addressInput = noticeForm.querySelector('input[name="address"]');
  
  const pinMainSize = {
    width: 65,
    height: 85
  };
  
  const defaultPosition = {
    x: 570,
    y: 375
  };

  const borderPosition = {
    xMin: 0,
    xMax: map.offsetWidth - pinMainSize.width,
    yMin: 130 - pinMainSize.height,
    yMax: 630 - pinMainSize.height
  }
  
  


  const makeMapOfFaded = (status) => {
    status = status || false;
    map.classList.toggle('map--faded', status);
  };

  const addValueToAddressInput = () => {
    const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
    const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
    addressInput.value = `${mainPinX}, ${mainPinY}`;
  };

  mapPinMain.style.left = defaultPosition.x + 'px';
  mapPinMain.style.top = defaultPosition.y + 'px';
  addValueToAddressInput();

  mapPinMain.addEventListener('mousedown', (evt) => {
    evt.preventDefault();

    let startCoords = {
      x: evt.clientX,
      y: evt.clientY
    }
    const onMouseMove = (moveEvt) => {
      moveEvt.preventDefault();
      
      const shift = {
        x: startCoords.x - moveEvt.clientX,
        y: startCoords.y - moveEvt.clientY
      }

      startCoords = {
        x: moveEvt.clientX,
        y: moveEvt.clientY
      }
      
      if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
        mapPinMain.style.left = `${borderPosition.xMin}px`;
      } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
        mapPinMain.style.left = `${borderPosition.xMax}px`;
      } else {
        mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
      }
      if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
        mapPinMain.style.top = `${borderPosition.yMin}px`;
      } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
        mapPinMain.style.top = `${borderPosition.yMax}px`;
      } else {
        mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
      }


      addValueToAddressInput()
    }

    const onMouseUp = (upEvt) => {    
      upEvt.preventDefault();


      makeMapOfFaded(false);
      window.form.blockForm(false);
      window.pin.hidePins(false);
      window.card.renderCard();
      addValueToAddressInput();
      window.card.openModal();
      document.removeEventListener('mousemove', onMouseMove);
      document.removeEventListener('mouseup', onMouseUp);
    }

    document.addEventListener('mousemove', onMouseMove);
    document.addEventListener('mouseup', onMouseUp);
  })


  window.map = {
    map,
    mapPinMain,
    noticeForm,
    makeMapOfFaded,
    defaultPosition,
    addValueToAddressInput
  }
}
'use strict';

{
  const template = document.querySelector('template');
  const mapPins = document.querySelector('.map__pins');
  const mapPinTemplate = template.content.querySelector('.map__pin');


  const makePins = () => {  
    const fragment = document.createDocumentFragment();

    for(let i = 0; i < window.data.pinsData.length; i++) {

      const pinElement = mapPinTemplate.cloneNode(true);

      pinElement.classList.add('hidden');

      pinElement.style.left = `${window.data.pinsData[i].location.x - window.data.pinSizeWidth / 2}px`;
      pinElement.style.top = `${window.data.pinsData[i].location.y - window.data.pinSizeHeight}px`;

      pinElement.querySelector('img').src = window.data.pinsData[i].author.avatar;
      pinElement.querySelector('img').alt = window.data.pinsData[i].offer.title;
      
      mapPins.appendChild(pinElement);  
    };

    return fragment;
  }


  const hidePins = (status) => {
    status = status || false;
    const mapPinsSmall = mapPins.querySelectorAll('.map__pins button:not(.map__pin--main)');
    mapPinsSmall.forEach((elem) => {
      elem.classList.toggle('hidden', status);
    });
  };



  mapPins.appendChild(makePins());
  
  window.pin = {
    mapPins,
    hidePins
  }


}











// const mapCard = template.content.querySelector('.map__card');

// mapPinMain.style.left = defaultPosition.x + 'px';
// mapPinMain.style.top = defaultPosition.y + 'px';
// addValueToAddressInput();

// mapPinMain.addEventListener('mousedown', (evt) => {
//   evt.preventDefault();
  
//   let startCoords = {
//     x: evt.clientX,
//     y: evt.clientY
//   }
  
//   const onMouseMove = (moveEvt) => {
//     moveEvt.preventDefault();
    
//     const shift = {
//       x: startCoords.x - moveEvt.clientX,
//       y: startCoords.y - moveEvt.clientY
//     }
    
//     startCoords = {
//       x: moveEvt.clientX,
//       y: moveEvt.clientY
//     }
    
//     if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
//       mapPinMain.style.left = `${borderPosition.xMin}px`;
//     } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
//       mapPinMain.style.left = `${borderPosition.xMax}px`;
//     } else {
//       mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
//     }
//     if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
//       mapPinMain.style.top = `${borderPosition.yMin}px`;
//     } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
//       mapPinMain.style.top = `${borderPosition.yMax}px`;
//     } else {
//       mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
//     }
    
    
//     addValueToAddressInput()
//   }
  
//   const onMouseUp = (upEvt) => {    
//     upEvt.preventDefault();
    
//     map.classList.remove('map--faded');
//     noticeForm.classList.remove('notice__form--disabled');
//     addValueToAddressInput();
//     openModal();
//     changePriceFromType();
    
//     document.removeEventListener('mousemove', onMouseMove);
//     document.removeEventListener('mouseup', onMouseUp);
//   }
  
//   document.addEventListener('mousemove', onMouseMove);
//   document.addEventListener('mouseup', onMouseUp);
// })

'use strict';

{

  const openModal = () => {
    const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
    mapPinsItems.forEach((elem, index) => {
      elem.addEventListener('click', () => {
        openItemPopup(index);
      });
    });
    for (let i = 0; i < formElements.length; i++) {
      formElements[i].disabled = false;
    }
    formHeader.disabled = false;
  }


  const openItemPopup = (i) => {
    const mapCardElement = mapCard.cloneNode();
    const mapFiltersContainer = document.querySelector('.map__filters-container');
    mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', 
      `<ul class="popup__features">
        ${pinsData[i].offer.features.reduce((acc, value) => {
          return `<li class="feature feature--${value}"></li> ${acc}`
        }, '')}
      </ul>`
    );
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', 
      `<div class="popup__photos">
        ${pinsData[i].offer.photos.reduce((acc, value) => {
          return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
        }, '')}
      </div>`);
    mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
    
    mapFiltersContainer.before(mapCardElement);
  }

}
'use strict';

{

  const titleOffer = [
    'Большая уютная квартира',
    "Маленькая неуютная квартира", 
    "Огромный прекрасный дворец", 
    "Маленький ужасный дворец", 
    "Красивый гостевой домик", 
    "Некрасивый негостеприимный домик", 
    "Уютное бунгало далеко от моря", 
    "Неуютное бунгало по колено в воде"
  ]

  const typeOffer = [
    'palace', 'flat', 'house', 'bungalo'
  ]

  const checkinOffer = [
    '12:00', '13:00', '14:00'
  ]

  const featuresOffer = [
    "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
  ]

  const photosOffer = [
    "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
    "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
    "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
  ]

  const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
  )


  const pinSize = {
    width: 50,
    height: 70
  };


  const randomizer = (min, max = false, arr) => {
    if (!Array.isArray(min)) {
      return Math.floor(min + Math.random() * (max + 1 - min));
    }
    const rand = Math.floor(Math.random() * (min.length));
    if (arr) {
      const copyArr = [...min];
      let newArr = [];
      for(let i = 0; i < max; i++) {
        newArr = [...newArr, randomizer(copyArr, true)];
      }
      return newArr;
    }
    if(max === false) {
      return min[rand];
    }
    return min.splice(rand, 1).join();
  }



  const makeArray = (maps) => {
    return maps.map((value, index) => {
      value = {
        author: {
          avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
        },
        location: {
          x: randomizer(300, 900) - pinSize.width/2,
          y: randomizer(130, 630) - pinSize.height/2
        },
        offer: {
          title: randomizer(titleOffer, true),
          address: '',
          price: randomizer(1000, 1000000),
          type: randomizer(typeOffer),
          rooms: randomizer(1, 5),
          guests: randomizer(1, 10),
          checkin: randomizer(checkinOffer),
          checkout: randomizer(checkinOffer),
          features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
          description: '',
          photos: randomizer(photosOffer, photosOffer.length, true)
        }      
      }
      value.offer.address = `${value.location.x}, ${value.location.y}`
      return value;
    })
  }



  const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
  window.pinsData = makeArray(maps);

}

window.map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}

formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}


const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}, ${mainPinY}`;
};



typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};



const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.style.left = (defaultPosition.x) + 'px';
  mapPinMain.style.top = (defaultPosition.y) + 'px';
  addValueToAddressInput();
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const pinMainSize = {
  width: 65,
  height: 65
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}`, `${mainPinY}`;
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}

const borderPosition = {
  xMin: 0,
  xMax: map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}


mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }

  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMin &&
      mapPinMain.offsetLeft - shift.x <= borderPosition.xMax &&
      mapPinMain.offsetTop - shift.y >= borderPosition.yMin &&
      mapPinMain.offsetTop - shift.y <= borderPosition.yMax) {
        mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
        mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }

    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    makePins();
    addValueToAddressInput();
    openModal();
    changePriceFromType();

    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})























const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const pinMainSize = {
  width: 65,
  height: 65
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const defaultPosition = {
  x: 570,
  y: 375
};


const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');



const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.classList.add('hidden');
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}


const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}, ${mainPinY}`;
};

makePins();

mapPinMain.style.left = defaultPosition.x + 'px';
mapPinMain.style.top = defaultPosition.y + 'px';
addValueToAddressInput();


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.classList.remove('hidden');
    elem.addEventListener('click', () => {
      console.log(pinsData);
      console.log(mapPinsItems);
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}

const borderPosition = {
  xMin: 0,
  xMax: map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}


mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }
  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
      mapPinMain.style.left = `${borderPosition.xMin}px`;
    } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
      mapPinMain.style.left = `${borderPosition.xMax}px`;
    } else {
      mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
    }
    if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
      mapPinMain.style.top = `${borderPosition.yMin}px`;
    } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
      mapPinMain.style.top = `${borderPosition.yMax}px`;
    } else {
      mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }


    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    addValueToAddressInput();
    changePriceFromType();
    openModal();
    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})























const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const pinMainSize = {
  width: 65,
  height: 85
};

const defaultPosition = {
  x: 570,
  y: 375
};



const borderPosition = {
  xMin: 0,
  xMax: window.map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}

const makePins = () => {  
  for(let i = 0; i < window.pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = window.pinsData[i].author.avatar;
    pinElement.style.left = `${window.pinsData[i].location.x}px`;
    pinElement.style.top = `${window.pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = window.pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}

mapPinMain.style.left = defaultPosition.x + 'px';
mapPinMain.style.top = defaultPosition.y + 'px';
addValueToAddressInput();

mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }

  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
      mapPinMain.style.left = `${borderPosition.xMin}px`;
    } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
      mapPinMain.style.left = `${borderPosition.xMax}px`;
    } else {
      mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
    }
    if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
      mapPinMain.style.top = `${borderPosition.yMin}px`;
    } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
      mapPinMain.style.top = `${borderPosition.yMax}px`;
    } else {
      mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }


    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    makePins();
    addValueToAddressInput();
    openModal();
    changePriceFromType();

    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})

const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const pinMainSize = {
  width: 65,
  height: 65
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}`, `${mainPinY}`;
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}

const borderPosition = {
  xMin: 0,
  xMax: map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}


mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }

  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMin &&
      mapPinMain.offsetLeft - shift.x <= borderPosition.xMax &&
      mapPinMain.offsetTop - shift.y >= borderPosition.yMin &&
      mapPinMain.offsetTop - shift.y <= borderPosition.yMax) {
        mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
        mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }

    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    makePins();
    addValueToAddressInput();
    openModal();
    changePriceFromType();

    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})























const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




'use strict';
{

  const map = document.querySelector('.map');
  const mapPinMain = document.querySelector('.map__pin--main');

  const noticeForm = document.querySelector('.notice__form');
  const addressInput = noticeForm.querySelector('input[name="address"]');
  
  const pinMainSize = {
    width: 65,
    height: 85
  };
  
  const defaultPosition = {
    x: 570,
    y: 375
  };

  const borderPosition = {
    xMin: 0,
    xMax: map.offsetWidth - pinMainSize.width,
    yMin: 130 - pinMainSize.height,
    yMax: 630 - pinMainSize.height
  }
  
  


  const makeMapOfFaded = (status) => {
    status = status || false;
    map.classList.toggle('map--faded', status);
  };

  const addValueToAddressInput = () => {
    const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
    const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
    addressInput.value = `${mainPinX}, ${mainPinY}`;
  };

  mapPinMain.style.left = defaultPosition.x + 'px';
  mapPinMain.style.top = defaultPosition.y + 'px';
  addValueToAddressInput();

  mapPinMain.addEventListener('mousedown', (evt) => {
    evt.preventDefault();

    let startCoords = {
      x: evt.clientX,
      y: evt.clientY
    }
    const onMouseMove = (moveEvt) => {
      moveEvt.preventDefault();
      
      const shift = {
        x: startCoords.x - moveEvt.clientX,
        y: startCoords.y - moveEvt.clientY
      }

      startCoords = {
        x: moveEvt.clientX,
        y: moveEvt.clientY
      }
      
      if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
        mapPinMain.style.left = `${borderPosition.xMin}px`;
      } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
        mapPinMain.style.left = `${borderPosition.xMax}px`;
      } else {
        mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
      }
      if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
        mapPinMain.style.top = `${borderPosition.yMin}px`;
      } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
        mapPinMain.style.top = `${borderPosition.yMax}px`;
      } else {
        mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
      }


      addValueToAddressInput()
    }

    const onMouseUp = (upEvt) => {    
      upEvt.preventDefault();


      makeMapOfFaded(false);
      window.form.blockForm(false);
      window.pin.hidePins(false);
      if (window.map.allowToRenderingPins) {
        window.pin.renderPins(window.data.data);
      }
      window.card.renderCard();
      addValueToAddressInput();

      
      window.card.openModal();
      window.map.allowToRenderingPins = false;
      document.removeEventListener('mousemove', onMouseMove);
      document.removeEventListener('mouseup', onMouseUp);
    }

    document.addEventListener('mousemove', onMouseMove);
    document.addEventListener('mouseup', onMouseUp);
  })


  window.map = {
    map,
    mapPinMain,
    noticeForm,
    makeMapOfFaded,
    defaultPosition,
    addValueToAddressInput,
    allowToRenderingPins: true
  }
}
'use strict';

{
  const template = document.querySelector('template');
  const mapPins = document.querySelector('.map__pins');
  const mapPinTemplate = template.content.querySelector('.map__pin');


  const makePins = (pin) => {  
    const pinElement = mapPinTemplate.cloneNode(true);

    // pinElement.classList.add('hidden');

    pinElement.style.left = `${pin.location.x - window.data.pinSizeWidth / 2}px`;
    pinElement.style.top = `${pin.location.y - window.data.pinSizeHeight}px`;

    pinElement.querySelector('img').src = pin.author.avatar;
    pinElement.querySelector('img').alt = pin.offer.title;
    
    return pinElement;
  }

  const renderPins = (pins) => {
    const fragment = document.createDocumentFragment();
    for (let i = 0; i < pins.length; i++) {
      fragment.appendChild(makePins(pins[i]));
    }
    mapPins.appendChild(fragment);
  }

  const hidePins = (status) => {
    status = status || false;
    const mapPinsSmall = mapPins.querySelectorAll('.map__pins button:not(.map__pin--main)');
    mapPinsSmall.forEach((elem) => {
      elem.classList.toggle('hidden', status);
    });
  };

  
  window.pin = {
    mapPins,
    renderPins,
    hidePins
  }


  

}











// const mapCard = template.content.querySelector('.map__card');

// mapPinMain.style.left = defaultPosition.x + 'px';
// mapPinMain.style.top = defaultPosition.y + 'px';
// addValueToAddressInput();

// mapPinMain.addEventListener('mousedown', (evt) => {
//   evt.preventDefault();
  
//   let startCoords = {
//     x: evt.clientX,
//     y: evt.clientY
//   }
  
//   const onMouseMove = (moveEvt) => {
//     moveEvt.preventDefault();
    
//     const shift = {
//       x: startCoords.x - moveEvt.clientX,
//       y: startCoords.y - moveEvt.clientY
//     }
    
//     startCoords = {
//       x: moveEvt.clientX,
//       y: moveEvt.clientY
//     }
    
//     if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
//       mapPinMain.style.left = `${borderPosition.xMin}px`;
//     } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
//       mapPinMain.style.left = `${borderPosition.xMax}px`;
//     } else {
//       mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
//     }
//     if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
//       mapPinMain.style.top = `${borderPosition.yMin}px`;
//     } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
//       mapPinMain.style.top = `${borderPosition.yMax}px`;
//     } else {
//       mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
//     }
    
    
//     addValueToAddressInput()
//   }
  
//   const onMouseUp = (upEvt) => {    
//     upEvt.preventDefault();
    
//     map.classList.remove('map--faded');
//     noticeForm.classList.remove('notice__form--disabled');
//     addValueToAddressInput();
//     openModal();
//     changePriceFromType();
    
//     document.removeEventListener('mousemove', onMouseMove);
//     document.removeEventListener('mouseup', onMouseUp);
//   }
  
//   document.addEventListener('mousemove', onMouseMove);
//   document.addEventListener('mouseup', onMouseUp);
// })

'use strict';

{
  const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]);



  const cardTemplate = document.querySelector('template')
    .content
    .querySelector('.map__card');

  const filtersContainer = document.querySelector('.map__filters-container');


  const renderCard = () => {
    let cardElement = window.map.map.querySelector('.map__card');

    if (!cardElement) {
      cardElement = cardTemplate.cloneNode(true);
      window.map.map.insertBefore(cardElement, filtersContainer);
      hideElement(cardElement);

      const popupClose = cardElement.querySelector('.popup__close');
      popupClose.addEventListener('click', function () {
        hideElement(cardElement);
        const pinActive = window.map.map.querySelector('.map__pin--active');
        pinActive.classList.remove('map__pin--active');
        document.removeEventListener('keydown', onPopupEscPress);
      });
    }
  };


  const fillCard = (element, i) => {

    const pinData = window.data.pinsData[i];
    element.querySelector('.popup__title').textContent = pinData.offer.title;
    element.querySelector('.popup__text--address').textContent = pinData.offer.address;
    element.querySelector('.popup__text--price').textContent = pinData.offer.price + '₽/ночь';
    element.querySelector('.popup__type').textContent = typeOutput.get(pinData.offer.type);
    element.querySelector('.popup__text--capacity').textContent = `${pinData.offer.rooms} комнаты для ${pinData.offer.guests} гостей`;
    element.querySelector('.popup__text--time').textContent = `Заезд после ${pinData.offer.checkin}, выезд до ${pinData.offer.checkout}`;
    
    const popupFeatures = element.querySelector('.popup__features');
    popupFeatures.innerHTML = pinData.offer.features.reduce((acc, value) => {
      return `<li class="feature feature--${value}"></li> ${acc}`
    }, '');
    
    element.querySelector('.popup__description').textContent = pinData.offer.description;
    
    const popupPhotos = element.querySelector('.popup__photos');
    popupPhotos.innerHTML = pinData.offer.photos.reduce((acc, value) => {
      return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
    }, '');

    element.querySelector('.popup__avatar').src = pinData.author.avatar;

    return element;
  }

  const hideElement = (element) => {
    element.classList.add('hidden');
  };

  const showElement = (element) => {
    element.classList.remove('hidden');
  };


  const openModal = () => {
    const mapPins = window.pin.mapPins.querySelectorAll('.map__pin:not(.map__pin--main)');
    const card = window.map.map.querySelector('.map__card');

    mapPins.forEach((elem, i) => {
      elem.addEventListener('click', function () {
        closeModal();
        elem.classList.add('map__pin--active');
        fillCard(card, i);
        showElement(card);

        document.addEventListener('keydown', onPopupEscPress);
      });
    });

  };


  const closeModal = () => {
    const card = window.map.map.querySelector('.map__card');
    if (card) {
      hideElement(card);
      document.removeEventListener('keydown', onPopupEscPress);

      const activePin = window.pin.mapPins.querySelector('.map__pin--active');
      if (activePin) {
        activePin.classList.remove('map__pin--active');
      }
    }
  };

  const onPopupEscPress = function (evt) {
    if (evt.keyCode === 27) {
      closeModal();
    }
  };



  window.card = {
    renderCard,
    openModal,
    closeModal
  };


}
'use strict';

{

  const titleOffer = [
    'Большая уютная квартира',
    "Маленькая неуютная квартира", 
    "Огромный прекрасный дворец", 
    "Маленький ужасный дворец", 
    "Красивый гостевой домик", 
    "Некрасивый негостеприимный домик", 
    "Уютное бунгало далеко от моря", 
    "Неуютное бунгало по колено в воде"
  ]

  const typeOffer = [
    'palace', 'flat', 'house', 'bungalo'
  ]

  const checkinOffer = [
    '12:00', '13:00', '14:00'
  ]

  const featuresOffer = [
    "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
  ]

  const photosOffer = [
    "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
    "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
    "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
  ]


  const pinSize = {
    width: 50,
    height: 70
  };


  const randomizer = (min, max = false, arr) => {
    if (!Array.isArray(min)) {
      return Math.floor(min + Math.random() * (max + 1 - min));
    }
    const rand = Math.floor(Math.random() * (min.length));
    if (arr) {
      const copyArr = [...min];
      let newArr = [];
      for(let i = 0; i < max; i++) {
        newArr = [...newArr, randomizer(copyArr, true)];
      }
      return newArr;
    }
    if(max === false) {
      return min[rand];
    }
    return min.splice(rand, 1).join();
  }



  const makeArray = (maps) => {
    return maps.map((value, index) => {
      value = {
        author: {
          avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
        },
        location: {
          x: randomizer(300, 900),
          y: randomizer(130, 630)
        },
        offer: {
          title: randomizer(titleOffer, true),
          address: '',
          price: randomizer(1000, 1000000),
          type: randomizer(typeOffer),
          rooms: randomizer(1, 5),
          guests: randomizer(1, 10),
          checkin: randomizer(checkinOffer),
          checkout: randomizer(checkinOffer),
          features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
          description: '',
          photos: randomizer(photosOffer, photosOffer.length, true)
        }      
      }
      value.offer.address = `${value.location.x}, ${value.location.y}`
      return value;
    })
  }



  const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
  const pinsData = makeArray(maps);
  window.data = {
    pinsData,
    pinSizeWidth: pinSize.width,
    pinSizeHeight: pinSize.height
  }
}

'use strict';
{

}

const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const fields = window.map.noticeForm.querySelectorAll('fieldset');
const addressInput = window.map.noticeForm.querySelector('input[name="address"]');
const typeSelect = window.map.noticeForm.querySelector('select[name="type"]');
const priceInput = window.map.noticeForm.querySelector('input[name="price"]');
const timeInSelect = window.map.noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = window.map.noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = window.map.noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = window.map.noticeForm.querySelector('select[name="capacity"]');
const submitBtn = window.map.noticeForm.querySelector('.form__submit');
const resetBtn = window.map.noticeForm.querySelector('.form__reset');


const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}

typeSelect.addEventListener('change', changePriceFromType);


timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});

timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const blockForm = (status) => {
  status = status || false;
  window.map.noticeForm.classList.toggle('notice__form--disabled', status);

  fields.forEach(function (elem) {
    elem.disabled = status;
  });
};

const removeFieldsInvalidity = () => {
  window.map.noticeForm.querySelectorAll('input, select, textarea').forEach(function (item) {
    item.classList.remove('invalid');
  });
};

const resetCoordOfMainPin = () => {
  window.map.mapPinMain.style.left = window.map.defaultPosition.x + 'px';
  window.map.mapPinMain.style.top = window.map.defaultPosition.y + 'px';
  window.map.addValueToAddressInput();
};

const deactivationForm = () => {
  // const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  window.map.noticeForm.reset();
  window.card.closeModal();
  window.pin.hidePins(true);
  blockForm(true);
  window.map.makeMapOfFaded(true);
  resetCoordOfMainPin()
};



window.map.noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();  
});


resetBtn.addEventListener('click', deactivationForm)

window.form = {
  blockForm: blockForm
};
'use strict';

{

  const openModal = () => {
    const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
    mapPinsItems.forEach((elem, index) => {
      elem.addEventListener('click', () => {
        openItemPopup(index);
      });
    });
    for (let i = 0; i < formElements.length; i++) {
      formElements[i].disabled = false;
    }
    formHeader.disabled = false;
  }


  const openItemPopup = (i) => {
    const mapCardElement = mapCard.cloneNode();
    const mapFiltersContainer = document.querySelector('.map__filters-container');
    mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', 
      `<ul class="popup__features">
        ${pinsData[i].offer.features.reduce((acc, value) => {
          return `<li class="feature feature--${value}"></li> ${acc}`
        }, '')}
      </ul>`
    );
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', 
      `<div class="popup__photos">
        ${pinsData[i].offer.photos.reduce((acc, value) => {
          return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
        }, '')}
      </div>`);
    mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
    
    mapFiltersContainer.before(mapCardElement);
  }

}
'use strict';

{

  const titleOffer = [
    'Большая уютная квартира',
    "Маленькая неуютная квартира", 
    "Огромный прекрасный дворец", 
    "Маленький ужасный дворец", 
    "Красивый гостевой домик", 
    "Некрасивый негостеприимный домик", 
    "Уютное бунгало далеко от моря", 
    "Неуютное бунгало по колено в воде"
  ]

  const typeOffer = [
    'palace', 'flat', 'house', 'bungalo'
  ]

  const checkinOffer = [
    '12:00', '13:00', '14:00'
  ]

  const featuresOffer = [
    "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
  ]

  const photosOffer = [
    "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
    "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
    "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
  ]

  const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
  )


  const pinSize = {
    width: 50,
    height: 70
  };


  const randomizer = (min, max = false, arr) => {
    if (!Array.isArray(min)) {
      return Math.floor(min + Math.random() * (max + 1 - min));
    }
    const rand = Math.floor(Math.random() * (min.length));
    if (arr) {
      const copyArr = [...min];
      let newArr = [];
      for(let i = 0; i < max; i++) {
        newArr = [...newArr, randomizer(copyArr, true)];
      }
      return newArr;
    }
    if(max === false) {
      return min[rand];
    }
    return min.splice(rand, 1).join();
  }



  const makeArray = (maps) => {
    return maps.map((value, index) => {
      value = {
        author: {
          avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
        },
        location: {
          x: randomizer(300, 900) - pinSize.width/2,
          y: randomizer(130, 630) - pinSize.height/2
        },
        offer: {
          title: randomizer(titleOffer, true),
          address: '',
          price: randomizer(1000, 1000000),
          type: randomizer(typeOffer),
          rooms: randomizer(1, 5),
          guests: randomizer(1, 10),
          checkin: randomizer(checkinOffer),
          checkout: randomizer(checkinOffer),
          features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
          description: '',
          photos: randomizer(photosOffer, photosOffer.length, true)
        }      
      }
      value.offer.address = `${value.location.x}, ${value.location.y}`
      return value;
    })
  }



  const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
  window.pinsData = makeArray(maps);

}

window.map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}

formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}


const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}, ${mainPinY}`;
};



typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};



const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.style.left = (defaultPosition.x) + 'px';
  mapPinMain.style.top = (defaultPosition.y) + 'px';
  addValueToAddressInput();
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const pinMainSize = {
  width: 65,
  height: 65
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}`, `${mainPinY}`;
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}

const borderPosition = {
  xMin: 0,
  xMax: map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}


mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }

  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMin &&
      mapPinMain.offsetLeft - shift.x <= borderPosition.xMax &&
      mapPinMain.offsetTop - shift.y >= borderPosition.yMin &&
      mapPinMain.offsetTop - shift.y <= borderPosition.yMax) {
        mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
        mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }

    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    makePins();
    addValueToAddressInput();
    openModal();
    changePriceFromType();

    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})























const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const pinMainSize = {
  width: 65,
  height: 65
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const defaultPosition = {
  x: 570,
  y: 375
};


const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');



const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.classList.add('hidden');
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}


const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}, ${mainPinY}`;
};

makePins();

mapPinMain.style.left = defaultPosition.x + 'px';
mapPinMain.style.top = defaultPosition.y + 'px';
addValueToAddressInput();


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.classList.remove('hidden');
    elem.addEventListener('click', () => {
      console.log(pinsData);
      console.log(mapPinsItems);
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}

const borderPosition = {
  xMin: 0,
  xMax: map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}


mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }
  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
      mapPinMain.style.left = `${borderPosition.xMin}px`;
    } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
      mapPinMain.style.left = `${borderPosition.xMax}px`;
    } else {
      mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
    }
    if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
      mapPinMain.style.top = `${borderPosition.yMin}px`;
    } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
      mapPinMain.style.top = `${borderPosition.yMax}px`;
    } else {
      mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }


    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    addValueToAddressInput();
    changePriceFromType();
    openModal();
    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})























const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const pinMainSize = {
  width: 65,
  height: 85
};

const defaultPosition = {
  x: 570,
  y: 375
};



const borderPosition = {
  xMin: 0,
  xMax: window.map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}

const makePins = () => {  
  for(let i = 0; i < window.pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = window.pinsData[i].author.avatar;
    pinElement.style.left = `${window.pinsData[i].location.x}px`;
    pinElement.style.top = `${window.pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = window.pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}

mapPinMain.style.left = defaultPosition.x + 'px';
mapPinMain.style.top = defaultPosition.y + 'px';
addValueToAddressInput();

mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }

  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
      mapPinMain.style.left = `${borderPosition.xMin}px`;
    } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
      mapPinMain.style.left = `${borderPosition.xMax}px`;
    } else {
      mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
    }
    if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
      mapPinMain.style.top = `${borderPosition.yMin}px`;
    } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
      mapPinMain.style.top = `${borderPosition.yMax}px`;
    } else {
      mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }


    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    makePins();
    addValueToAddressInput();
    openModal();
    changePriceFromType();

    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})

const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const pinMainSize = {
  width: 65,
  height: 65
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}`, `${mainPinY}`;
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}

const borderPosition = {
  xMin: 0,
  xMax: map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}


mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }

  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMin &&
      mapPinMain.offsetLeft - shift.x <= borderPosition.xMax &&
      mapPinMain.offsetTop - shift.y >= borderPosition.yMin &&
      mapPinMain.offsetTop - shift.y <= borderPosition.yMax) {
        mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
        mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }

    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    makePins();
    addValueToAddressInput();
    openModal();
    changePriceFromType();

    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})























const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




'use strict';
{

  const map = document.querySelector('.map');
  const mapPinMain = document.querySelector('.map__pin--main');

  const noticeForm = document.querySelector('.notice__form');
  const addressInput = noticeForm.querySelector('input[name="address"]');
  
  const pinMainSize = {
    width: 65,
    height: 85
  };
  
  const defaultPosition = {
    x: 570,
    y: 375
  };

  const borderPosition = {
    xMin: 0,
    xMax: map.offsetWidth - pinMainSize.width,
    yMin: 130 - pinMainSize.height,
    yMax: 630 - pinMainSize.height
  }
  
  


  const makeMapOfFaded = (status) => {
    status = status || false;
    map.classList.toggle('map--faded', status);
  };

  const addValueToAddressInput = () => {
    const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
    const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
    addressInput.value = `${mainPinX}, ${mainPinY}`;
  };

  mapPinMain.style.left = defaultPosition.x + 'px';
  mapPinMain.style.top = defaultPosition.y + 'px';
  addValueToAddressInput();

  mapPinMain.addEventListener('mousedown', (evt) => {
    evt.preventDefault();

    let startCoords = {
      x: evt.clientX,
      y: evt.clientY
    }
    const onMouseMove = (moveEvt) => {
      moveEvt.preventDefault();
      
      const shift = {
        x: startCoords.x - moveEvt.clientX,
        y: startCoords.y - moveEvt.clientY
      }

      startCoords = {
        x: moveEvt.clientX,
        y: moveEvt.clientY
      }
      
      if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
        mapPinMain.style.left = `${borderPosition.xMin}px`;
      } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
        mapPinMain.style.left = `${borderPosition.xMax}px`;
      } else {
        mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
      }
      if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
        mapPinMain.style.top = `${borderPosition.yMin}px`;
      } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
        mapPinMain.style.top = `${borderPosition.yMax}px`;
      } else {
        mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
      }


      addValueToAddressInput()
    }

    const onMouseUp = (upEvt) => {    
      upEvt.preventDefault();


      makeMapOfFaded(false);
      window.form.blockForm(false);
      window.pin.hidePins(false);
      window.card.renderCard();
      addValueToAddressInput();
      window.card.openModal();
      document.removeEventListener('mousemove', onMouseMove);
      document.removeEventListener('mouseup', onMouseUp);
    }

    document.addEventListener('mousemove', onMouseMove);
    document.addEventListener('mouseup', onMouseUp);
  })


  window.map = {
    map,
    mapPinMain,
    noticeForm,
    makeMapOfFaded,
    defaultPosition,
    addValueToAddressInput
  }
}
'use strict';

{
  const template = document.querySelector('template');
  const mapPins = document.querySelector('.map__pins');
  const mapPinTemplate = template.content.querySelector('.map__pin');


  const makePins = () => {  
    const fragment = document.createDocumentFragment();

    for(let i = 0; i < window.data.pinsData.length; i++) {

      const pinElement = mapPinTemplate.cloneNode(true);

      pinElement.classList.add('hidden');

      pinElement.style.left = `${window.data.pinsData[i].location.x - window.data.pinSizeWidth / 2}px`;
      pinElement.style.top = `${window.data.pinsData[i].location.y - window.data.pinSizeHeight}px`;

      pinElement.querySelector('img').src = window.data.pinsData[i].author.avatar;
      pinElement.querySelector('img').alt = window.data.pinsData[i].offer.title;
      
      mapPins.appendChild(pinElement);  
    };

    return fragment;
  }


  const hidePins = (status) => {
    status = status || false;
    const mapPinsSmall = mapPins.querySelectorAll('.map__pins button:not(.map__pin--main)');
    mapPinsSmall.forEach((elem) => {
      elem.classList.toggle('hidden', status);
    });
  };



  mapPins.appendChild(makePins());
  
  window.pin = {
    mapPins,
    hidePins
  }


}











// const mapCard = template.content.querySelector('.map__card');

// mapPinMain.style.left = defaultPosition.x + 'px';
// mapPinMain.style.top = defaultPosition.y + 'px';
// addValueToAddressInput();

// mapPinMain.addEventListener('mousedown', (evt) => {
//   evt.preventDefault();
  
//   let startCoords = {
//     x: evt.clientX,
//     y: evt.clientY
//   }
  
//   const onMouseMove = (moveEvt) => {
//     moveEvt.preventDefault();
    
//     const shift = {
//       x: startCoords.x - moveEvt.clientX,
//       y: startCoords.y - moveEvt.clientY
//     }
    
//     startCoords = {
//       x: moveEvt.clientX,
//       y: moveEvt.clientY
//     }
    
//     if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
//       mapPinMain.style.left = `${borderPosition.xMin}px`;
//     } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
//       mapPinMain.style.left = `${borderPosition.xMax}px`;
//     } else {
//       mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
//     }
//     if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
//       mapPinMain.style.top = `${borderPosition.yMin}px`;
//     } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
//       mapPinMain.style.top = `${borderPosition.yMax}px`;
//     } else {
//       mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
//     }
    
    
//     addValueToAddressInput()
//   }
  
//   const onMouseUp = (upEvt) => {    
//     upEvt.preventDefault();
    
//     map.classList.remove('map--faded');
//     noticeForm.classList.remove('notice__form--disabled');
//     addValueToAddressInput();
//     openModal();
//     changePriceFromType();
    
//     document.removeEventListener('mousemove', onMouseMove);
//     document.removeEventListener('mouseup', onMouseUp);
//   }
  
//   document.addEventListener('mousemove', onMouseMove);
//   document.addEventListener('mouseup', onMouseUp);
// })

'use strict';

{

  const openModal = () => {
    const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
    mapPinsItems.forEach((elem, index) => {
      elem.addEventListener('click', () => {
        openItemPopup(index);
      });
    });
    for (let i = 0; i < formElements.length; i++) {
      formElements[i].disabled = false;
    }
    formHeader.disabled = false;
  }


  const openItemPopup = (i) => {
    const mapCardElement = mapCard.cloneNode();
    const mapFiltersContainer = document.querySelector('.map__filters-container');
    mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', 
      `<ul class="popup__features">
        ${pinsData[i].offer.features.reduce((acc, value) => {
          return `<li class="feature feature--${value}"></li> ${acc}`
        }, '')}
      </ul>`
    );
    mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
    mapCardElement.insertAdjacentHTML('beforeend', 
      `<div class="popup__photos">
        ${pinsData[i].offer.photos.reduce((acc, value) => {
          return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
        }, '')}
      </div>`);
    mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
    
    mapFiltersContainer.before(mapCardElement);
  }

}
'use strict';

{

  const titleOffer = [
    'Большая уютная квартира',
    "Маленькая неуютная квартира", 
    "Огромный прекрасный дворец", 
    "Маленький ужасный дворец", 
    "Красивый гостевой домик", 
    "Некрасивый негостеприимный домик", 
    "Уютное бунгало далеко от моря", 
    "Неуютное бунгало по колено в воде"
  ]

  const typeOffer = [
    'palace', 'flat', 'house', 'bungalo'
  ]

  const checkinOffer = [
    '12:00', '13:00', '14:00'
  ]

  const featuresOffer = [
    "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
  ]

  const photosOffer = [
    "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
    "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
    "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
  ]

  const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
  )


  const pinSize = {
    width: 50,
    height: 70
  };


  const randomizer = (min, max = false, arr) => {
    if (!Array.isArray(min)) {
      return Math.floor(min + Math.random() * (max + 1 - min));
    }
    const rand = Math.floor(Math.random() * (min.length));
    if (arr) {
      const copyArr = [...min];
      let newArr = [];
      for(let i = 0; i < max; i++) {
        newArr = [...newArr, randomizer(copyArr, true)];
      }
      return newArr;
    }
    if(max === false) {
      return min[rand];
    }
    return min.splice(rand, 1).join();
  }



  const makeArray = (maps) => {
    return maps.map((value, index) => {
      value = {
        author: {
          avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
        },
        location: {
          x: randomizer(300, 900) - pinSize.width/2,
          y: randomizer(130, 630) - pinSize.height/2
        },
        offer: {
          title: randomizer(titleOffer, true),
          address: '',
          price: randomizer(1000, 1000000),
          type: randomizer(typeOffer),
          rooms: randomizer(1, 5),
          guests: randomizer(1, 10),
          checkin: randomizer(checkinOffer),
          checkout: randomizer(checkinOffer),
          features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
          description: '',
          photos: randomizer(photosOffer, photosOffer.length, true)
        }      
      }
      value.offer.address = `${value.location.x}, ${value.location.y}`
      return value;
    })
  }



  const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
  window.pinsData = makeArray(maps);

}

window.map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}

formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}


const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}, ${mainPinY}`;
};



typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};



const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.style.left = (defaultPosition.x) + 'px';
  mapPinMain.style.top = (defaultPosition.y) + 'px';
  addValueToAddressInput();
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const pinMainSize = {
  width: 65,
  height: 65
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}`, `${mainPinY}`;
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}

const borderPosition = {
  xMin: 0,
  xMax: map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}


mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }

  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMin &&
      mapPinMain.offsetLeft - shift.x <= borderPosition.xMax &&
      mapPinMain.offsetTop - shift.y >= borderPosition.yMin &&
      mapPinMain.offsetTop - shift.y <= borderPosition.yMax) {
        mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
        mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }

    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    makePins();
    addValueToAddressInput();
    openModal();
    changePriceFromType();

    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})























const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const pinMainSize = {
  width: 65,
  height: 65
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const defaultPosition = {
  x: 570,
  y: 375
};


const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');



const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.classList.add('hidden');
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}


const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}, ${mainPinY}`;
};

makePins();

mapPinMain.style.left = defaultPosition.x + 'px';
mapPinMain.style.top = defaultPosition.y + 'px';
addValueToAddressInput();


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.classList.remove('hidden');
    elem.addEventListener('click', () => {
      console.log(pinsData);
      console.log(mapPinsItems);
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}

const borderPosition = {
  xMin: 0,
  xMax: map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}


mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }
  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
      mapPinMain.style.left = `${borderPosition.xMin}px`;
    } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
      mapPinMain.style.left = `${borderPosition.xMax}px`;
    } else {
      mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
    }
    if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
      mapPinMain.style.top = `${borderPosition.yMin}px`;
    } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
      mapPinMain.style.top = `${borderPosition.yMax}px`;
    } else {
      mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }


    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    addValueToAddressInput();
    changePriceFromType();
    openModal();
    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})























const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const pinMainSize = {
  width: 65,
  height: 85
};

const defaultPosition = {
  x: 570,
  y: 375
};



const borderPosition = {
  xMin: 0,
  xMax: window.map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}

const makePins = () => {  
  for(let i = 0; i < window.pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = window.pinsData[i].author.avatar;
    pinElement.style.left = `${window.pinsData[i].location.x}px`;
    pinElement.style.top = `${window.pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = window.pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}

mapPinMain.style.left = defaultPosition.x + 'px';
mapPinMain.style.top = defaultPosition.y + 'px';
addValueToAddressInput();

mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }

  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x <= borderPosition.xMin) {
      mapPinMain.style.left = `${borderPosition.xMin}px`;
    } else if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMax) {
      mapPinMain.style.left = `${borderPosition.xMax}px`;
    } else {
      mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
    }
    if (mapPinMain.offsetTop - shift.y <= borderPosition.yMin) {
      mapPinMain.style.top = `${borderPosition.yMin}px`;
    } else if (mapPinMain.offsetTop - shift.y >= borderPosition.yMax) {
      mapPinMain.style.top = `${borderPosition.yMax}px`;
    } else {
      mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }


    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    makePins();
    addValueToAddressInput();
    openModal();
    changePriceFromType();

    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})

const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const pinMainSize = {
  width: 65,
  height: 65
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  const mainPinX = (parseInt(mapPinMain.style.left, 10) + Math.floor(pinMainSize.width / 2));
  const mainPinY = (parseInt(mapPinMain.style.top, 10) + pinMainSize.height);
  addressInput.value = `${mainPinX}`, `${mainPinY}`;
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}

const borderPosition = {
  xMin: 0,
  xMax: map.offsetWidth - pinMainSize.width,
  yMin: 130 - pinMainSize.height,
  yMax: 630 - pinMainSize.height
}


mapPinMain.addEventListener('mousedown', (evt) => {
  evt.preventDefault();

  let startCoords = {
    x: evt.clientX,
    y: evt.clientY
  }

  const onMouseMove = (moveEvt) => {
    moveEvt.preventDefault();
    
    const shift = {
      x: startCoords.x - moveEvt.clientX,
      y: startCoords.y - moveEvt.clientY
    }

    startCoords = {
      x: moveEvt.clientX,
      y: moveEvt.clientY
    }
    
    if (mapPinMain.offsetLeft - shift.x >= borderPosition.xMin &&
      mapPinMain.offsetLeft - shift.x <= borderPosition.xMax &&
      mapPinMain.offsetTop - shift.y >= borderPosition.yMin &&
      mapPinMain.offsetTop - shift.y <= borderPosition.yMax) {
        mapPinMain.style.left = (mapPinMain.offsetLeft - shift.x) + 'px';
        mapPinMain.style.top = (mapPinMain.offsetTop - shift.y) + 'px';
    }

    addValueToAddressInput()
  }

  const onMouseUp = (upEvt) => {    
    upEvt.preventDefault();

    map.classList.remove('map--faded');
    noticeForm.classList.remove('notice__form--disabled');
    makePins();
    addValueToAddressInput();
    openModal();
    changePriceFromType();

    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
  }

  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
})























const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const roomsValues = {
  1: [1],
  2: [1, 2],
  3: [1, 2, 3],
  100: [0]
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}

// document.querySelector('.map').classList.remove('map--faded');

const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);


const makePins = () => {  
  for(let i = 0; i < pinsData.length; i++) {
    const pinElement = mapPinTemplate.cloneNode(true);
    pinElement.querySelector('img').src = pinsData[i].author.avatar;
    pinElement.style.left = `${pinsData[i].location.x}px`;
    pinElement.style.top = `${pinsData[i].location.y}px`;
    pinElement.querySelector('img').alt = pinsData[i].offer.title;
    
    mapPins.appendChild(pinElement);  
  };
}



const map = document.querySelector('.map');
const mapPinMain = document.querySelector('.map__pin--main');

const noticeForm = document.querySelector('.notice__form');
const formElements = document.querySelectorAll('.form__element');
const formHeader = document.querySelector('.notice__header');
const success = document.querySelector('.success');
const addressInput = noticeForm.querySelector('input[name="address"]');
const typeSelect = noticeForm.querySelector('select[name="type"]');
const priceInput = noticeForm.querySelector('input[name="price"]');
const timeInSelect = noticeForm.querySelector('select[name="timein"]');
const timeOutSelect = noticeForm.querySelector('select[name="timeout"]');
const roomsSelect = noticeForm.querySelector('select[name="rooms"]');
const capacitySelect = noticeForm.querySelector('select[name="capacity"]');
const submitBtn = noticeForm.querySelector('.form__submit');
const resetBtn = noticeForm.querySelector('.form__reset');


formHeader.disabled = true;

for (let i = 0; i < formElements.length; i++) {
  formElements[i].disabled = true;
}

addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);

const addValueToAddressInput = () => {
  addressInput.value = (mapPinMain.offsetTop + pinSize.height) + ', ' + (mapPinMain.offsetLeft + pinSize.width / 2);
};


const openModal = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  mapPinsItems.forEach((elem, index) => {
    elem.addEventListener('click', () => {
      openItemPopup(index);
    });
  });
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = false;
  }
  formHeader.disabled = false;
}


const openItemPopup = (i) => {
  const mapCardElement = mapCard.cloneNode();
  const mapFiltersContainer = document.querySelector('.map__filters-container');
  mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[i].offer.title}</h3>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[i].offer.address}</small></p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[i].offer.price}₽/ночь</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[i].offer.type)}</h4>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[i].offer.rooms} комнаты для ${pinsData[i].offer.guests} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[i].offer.checkin}, выезд до ${pinsData[i].offer.checkout} гостей.</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<ul class="popup__features">
      ${pinsData[i].offer.features.reduce((acc, value) => {
        return `<li class="feature feature--${value}"></li> ${acc}`
      }, '')}
    </ul>`
  );
  mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[i].offer.description}</p>`);
  mapCardElement.insertAdjacentHTML('beforeend', 
    `<div class="popup__photos">
      ${pinsData[i].offer.photos.reduce((acc, value) => {
        return `<img src="${value}" width="40" height="40" class="popup__photo">${acc}`
      }, '')}
    </div>`);
  mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[i].author.avatar}" class="popup__avatar" width="70" height="70">`); 
  
  mapFiltersContainer.before(mapCardElement);
}



mapPinMain.addEventListener('mouseup', () => {
  map.classList.remove('map--faded');
  noticeForm.classList.remove('notice__form--disabled');
  makePins();
  addValueToAddressInput();
  openModal();
  changePriceFromType();
})


const changePriceFromType = () => {
  switch(typeSelect.value) {
    case 'bungalo': 
      priceInput.min = 0;
      priceInput.placeholder = 0;
      break;
    case 'flat': 
      priceInput.min = 1000;
      priceInput.placeholder = 1000;
      break;
    case 'house': 
      priceInput.min = 5000;
      priceInput.placeholder = 5000;
      break;
    case 'palace': 
      priceInput.min = 10000;
      priceInput.placeholder = 10000;
      break;
  }
}


typeSelect.addEventListener('change', changePriceFromType);
timeInSelect.addEventListener('change', () => {
  timeOutSelect.value = timeInSelect.value;
});
timeOutSelect.addEventListener('change', () => {
  timeInSelect.value = timeOutSelect.value;
});


const checkPlaceValidity = () => {
  const roomGuests = roomsValues[roomsSelect.value];
  if (roomGuests.indexOf(+capacitySelect.value) === -1) {
    capacitySelect.setCustomValidity('Количество гостей не влезут в выбранную комнату');
  } else {
    capacitySelect.setCustomValidity('');
  }
};

roomsSelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

capacitySelect.addEventListener('change', (evt) => {
  evt.target.setCustomValidity('');
});

submitBtn.addEventListener('click', () => {
  checkPlaceValidity();
});


const showSuccess = () => {
  success.classList.remove('hidden');
  document.addEventListener('keydown', (evt) => {
    if (evt.keyCode === 27) {
      success.classList.add('hidden');
    }
  });
  document.addEventListener('click', () => {
    success.classList.add('hidden');
  });
};


const deactivationForm = () => {
  const mapPinsItems = document.querySelectorAll('.map__pin:not(.map__pin--main)');
  noticeForm.reset();
  for (let i = 0; i < formElements.length; i++) {
    formElements[i].disabled = true;
  }
  formHeader.disabled = true;
  for (let i = 0; i < mapPinsItems.length; i++) {
    mapPinsItems[i].remove();
  }
  if (mapCard) {
    mapCard.remove();
  }
  mapPinMain.top = '375px';
  mapPinMain.left = '570px';
  addressInput.value = (mapPinMain.offsetTop - mapPinMain.offsetHeight / 2) + ', ' + (mapPinMain.offsetLeft - mapPinMain.offsetWidth / 2);
  map.classList.add('map--faded');
  noticeForm.classList.add('notice__form--disabled');
};



noticeForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  showSuccess();
  deactivationForm();
});


resetBtn.addEventListener('click', deactivationForm)
const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const typeOutput = new Map([
    ['palace', 'Дворец'], 
    ['flat', 'Квартира'], 
    ['house', 'Дом'],
    ['bungalo', 'Бунгало']
  ]
)

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode();
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.insertAdjacentHTML('beforeend', `<h3 class=".popup__title">${pinsData[0].offer.title}</h3>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--address"><small>${pinsData[0].offer.address}</small></p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--price">${pinsData[0].offer.price}₽/ночь</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<h4 class="popup__type">${typeOutput.get(pinsData[0].offer.type)}</h4>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--capacity">${pinsData[0].offer.rooms} комнаты для ${pinsData[0].offer.guests} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__text--time">Заезд после ${pinsData[0].offer.checkin}, выезд до ${pinsData[0].offer.checkout} гостей.</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__features">
${pinsData[0].offer.features.reduce((acc, value) => {
  return `<li class="feature feature--${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('beforeend', `<p class="popup__description">${pinsData[0].offer.description}</p>`);
mapCardElement.insertAdjacentHTML('beforeend', 
`<ul class="popup__photos">
${pinsData[0].offer.photos.reduce((acc, value) => {
  return `<li><img src="${value}"></li> ${acc}`
}, '')}
</ul>`);
mapCardElement.insertAdjacentHTML('afterbegin', `<img src="${pinsData[0].author.avatar}" class="popup__avatar" width="70" height="70">`);


mapFiltersContainer.before(mapCardElement);




const titleOffer = [
  'Большая уютная квартира',
  "Маленькая неуютная квартира", 
  "Огромный прекрасный дворец", 
  "Маленький ужасный дворец", 
  "Красивый гостевой домик", 
  "Некрасивый негостеприимный домик", 
  "Уютное бунгало далеко от моря", 
  "Неуютное бунгало по колено в воде"
]

const typeOffer = [
  'palace', 'flat', 'house', 'bungalo'
]

const checkinOffer = [
  '12:00', '13:00', '14:00'
]

const featuresOffer = [
  "wifi", "dishwasher", "parking", "washer", "elevator", "conditioner"
]

const photosOffer = [
  "http://o0.github.io/assets/images/tokyo/hotel1.jpg", 
  "http://o0.github.io/assets/images/tokyo/hotel2.jpg",
  "http://o0.github.io/assets/images/tokyo/hotel3.jpg"
]

const pinSize = {
  width: 50,
  height: 70
};

const template = document.querySelector('template');
const mapPinTemplate = template.content.querySelector('.map__pin');
const mapPins = document.querySelector('.map__pins');
const mapCard = template.content.querySelector('.map__card');

const randomizer = (min, max = false, arr) => {
  if (!Array.isArray(min)) {
    return Math.floor(min + Math.random() * (max + 1 - min));
  }
  const rand = Math.floor(Math.random() * (min.length));
  if (arr) {
    const copyArr = [...min];
    let newArr = [];
    for(let i = 0; i < max; i++) {
      newArr = [...newArr, randomizer(copyArr, true)];
    }
    return newArr;
  }
  if(max === false) {
    return min[rand];
  }
  return min.splice(rand, 1).join();
}



const makeArray = (maps) => {
  return maps.map((value, index) => {
    value = {
      author: {
        avatar: `img/avatars/user${(index < 10 ? '0' : '')}${(index + 1)}.png`
      },
      location: {
        x: randomizer(300, 900) - pinSize.width/2,
        y: randomizer(130, 630) - pinSize.height/2
      },
      offer: {
        title: randomizer(titleOffer, true),
        address: '',
        price: randomizer(1000, 1000000),
        type: randomizer(typeOffer),
        rooms: randomizer(1, 5),
        guests: randomizer(1, 10),
        checkin: randomizer(checkinOffer),
        checkout: randomizer(checkinOffer),
        features: randomizer(featuresOffer, randomizer(1, featuresOffer.length), true),
        description: '',
        photos: randomizer(photosOffer, photosOffer.length, true)
      }      
    }
    value.offer.address = `${value.location.x}, ${value.location.y}`
    return value;
  })
}
const maps = [{}, {}, {}, {}, {}, {}, {}, {}];
const pinsData = makeArray(maps);

document.querySelector('.map').classList.remove('map--faded');

for(let i = 0; i < pinsData.length; i++) {
  const pinElement = mapPinTemplate.cloneNode(true);
  pinElement.querySelector('img').src = pinsData[i].author.avatar;
  pinElement.style.left = `${pinsData[i].location.x}px`;
  pinElement.style.top = `${pinsData[i].location.y}px`;
  pinElement.querySelector('img').alt = pinsData[i].offer.title;
  
  mapPins.appendChild(pinElement);  
};


const mapCardElement = mapCard.cloneNode(true);
const mapFiltersContainer = document.querySelector('.map__filters-container');
mapCardElement.querySelector('h3').textContent = pinsData[0].offer.title;
mapFiltersContainer.before(mapCardElement);



